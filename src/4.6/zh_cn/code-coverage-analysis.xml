<?xml version="1.0" encoding="utf-8" ?>

<chapter id="code-coverage-analysis">
  <title>代码覆盖率分析</title>

  <blockquote>
    <attribution>Wikipedia</attribution>
      计算机科学中的代码覆盖率是一种用于衡量特定测试套件对程序源代码测试程度的指标。拥有高代码覆盖率的程序相较于低代码低概率的程序而言测试的更加彻底，包含软件bug的可能性更低。
  </blockquote>

  <para>
    <indexterm><primary>Code Coverage （代码覆盖率）</primary></indexterm>
    <indexterm><primary>Xdebug</primary></indexterm>

    在本章中，你将学到 PHPUnit 代码覆盖率功能的一切。通过这个功能，能够了解在测试运行过程中执行了生产代码的哪些部分。它使用了 <ulink url="http://github.com/sebastianbergmann/php-code-coverage">PHP_CodeCoverage</ulink> 组件，而这个组件又使用了 <ulink url="http://www.xdebug.org/">Xdebug</ulink> 扩展为 PHP 提供的语句覆盖率功能。
  </para>

  <note>
    <para>
      Xdebug 不随 PHPUnit 分发。如果在运行测试时收到了 Xdebug 扩展未加载的通知，就意味着 Xdebug 未安装或者未正确配置。在使用 PHPUnit 的代码覆盖率分析功能之前，你需要阅读 <ulink url="http://xdebug.org/docs/install">Xdebug 安装指南</ulink>。
    </para>
  </note>

  <para>
    PHPUnit可以生成基于HTML的代码覆盖率报告，同时也能生成多种格式的带有代码覆盖率信息的基于XML的日志文件(Clover, Crap4J, PHPUnit)。代码覆盖率信息也能以文本格式提供（同时可以输出到STDOUT）或以PHP代码格式输出以供进一步处理。
  </para>

  <para>
    <xref linkend="textui"/>中列出了控制代码覆盖率功能的各种命令行参数可供参考，同时<xref
    linkend="appendixes.configuration.logging"/>中可以找到其他有关的配置设置信息。
  </para>

  <section id="code-coverage-analysis.metrics">
    <title>Software Metrics for Code Coverage</title>

    <para>
      目前存在多种软件度量用于衡量代码覆盖率：
    </para>

    <variablelist>
      <varlistentry>
        <indexterm><primary>Code Coverage（代码覆盖率）</primary><secondary>Line Coverage（行覆盖率）</secondary></indexterm>
        <term><emphasis>行覆盖率(Line Coverage)</emphasis></term>
        <listitem>
          <para>
            <emphasis>行覆盖率(Line Coverage)</emphasis>按单个可执行行是否已执行到进行计量。
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <indexterm><primary>Code Coverage（代码覆盖率）</primary><secondary>Function and Method Coverage（函数与方法覆盖率）</secondary></indexterm>
        <term><emphasis>函数与方法覆盖率(Function and Method Coverage)</emphasis></term>
        <listitem>
          <para>
            <emphasis>函数与方法覆盖率(Function and Method Coverage)</emphasis>按单个函数或方法是否已调用到进行计量。仅当函数或方法的所有可执行行全部已覆盖时 PHP_CodeCoverage 才将其视为已覆盖。
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <indexterm><primary>Code Coverage（代码覆盖率）</primary><secondary>Class and Trait Coverage（类与性状覆盖率）</secondary></indexterm>
        <term><emphasis>类与性状覆盖率(Class and Trait Coverage)</emphasis></term>
        <listitem>
          <para>
            <emphasis>类与性状覆盖率(Class and Trait Coverage)</emphasis>按单个类或性状的所有方法是否全部覆盖进行计量。仅当一个类或性状的所有方法全部已覆盖时 PHP_CodeCoverage 才将其视为已覆盖。
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <indexterm><primary>Code Coverage（代码覆盖率）</primary><secondary>Opcode Coverage（opcode覆盖率）</secondary></indexterm>
        <term><emphasis>opcode覆盖率</emphasis></term>
        <listitem>
          <para>
            <emphasis>opcode覆盖率</emphasis>按函数或方法对应的每条opcode是否执行到进行计量。一行（PHP的）代码通常会编译得到多条opcode。行覆盖率计量时只要执行了其中任何一条opcode就视为此行已覆盖。
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <indexterm><primary>Code Coverage（代码覆盖率）</primary><secondary>Branch Coverage（分支覆盖率）</secondary></indexterm>
        <term><emphasis>分支覆盖率(Branch Coverage)</emphasis></term>
        <listitem>
          <para>
            <emphasis>分支覆盖率(Branch Coverage)</emphasis>按控制结构的分支进行计量。测试套件运行中每个控制结构的布尔表达式求值为 <literal>true</literal> 与为 <literal>false</literal> 各自计为一个分支。
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <indexterm><primary>Code Coverage（代码覆盖率）</primary><secondary>Path Coverage（路径覆盖率）</secondary></indexterm>
        <term><emphasis>路径覆盖率(Path Coverage)</emphasis></term>
        <listitem>
          <para>
            <emphasis>路径覆盖率(Path Coverage)</emphasis>按照测试套件运行时函数或者方法中可能的执行路径进行度量。一个执行路径指的是从进入函数或方法到离开的过程中特定的经过所有分支的序列。
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <indexterm><primary>变更风险反模式（Change Risk Anti-Patterns，缩写为CRAP）指数</primary></indexterm>
        <term><emphasis>变更风险反模式(CRAP)指数(Change Risk Anti-Patterns (CRAP) Index)</emphasis></term>
        <listitem>
          <para>
            <emphasis>变更风险反模式(CRAP)指数(Change Risk Anti-Patterns (CRAP) Index)</emphasis>是以单元代码的环路复杂性与代码覆盖率为基础计算得出的。代码不太复杂及有恰当的测试覆盖率将得到较低的CRAP指数。编写测试或重构代码来降低其复杂性均能降低CRAP指数。
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <note>
      <para>
        目前 PHP_CodeCoverage 尚不支持 <emphasis>opcode覆盖率</emphasis>、<emphasis>分支覆盖率</emphasis> 及 <emphasis>路径覆盖率</emphasis>。
      </para>
    </note>
  </section>

  <section id="code-coverage-analysis.including-excluding-files">
    <title>包含与排除文件</title>

    <para>
       默认情况下，报告中包括（且只包括）所有包含至少一行已执行代码的源代码文件。
    </para>

    <para>
      <indexterm><primary>Code Coverage （代码覆盖率）</primary><secondary>Blacklist （黑名单）</secondary></indexterm>

      默认情况下，有一个特定的黑名单会应用于 <emphasis>blacklist</emphasis> 代码覆盖率报告，用以排除某些文件。这个黑名单中包含了 PHPUnit 和其所依赖的组件的所有源文件。
    </para>

    <para>
      <indexterm><primary>Code Coverage（代码覆盖率）</primary><secondary>Whitelist（白名单）</secondary></indexterm>

      用<emphasis>白名单</emphasis>替代上面提到的黑名单是一种良好的习惯。
    </para>

    <para>
      可以在 PHPUnit 的配置信息中（参见<xref
      linkend="appendixes.configuration.blacklist-whitelist"/>）设置 <literal>addUncoveredFilesFromWhitelist="true"</literal>，来将白名单中包含的所有文件全部加入到代码覆盖率报告中。这样可以把完全没有测试到的文件也一并包含到报告中。如果需要知道这些未覆盖文件中有哪些行是可执行的，需要同时在 PHPUnit 的配置信息中（参见<xref
      linkend="appendixes.configuration.blacklist-whitelist"/>）设置 <literal>processUncoveredFilesFromWhitelist="true"</literal>。
    </para>

    <note>
      <para>
        请注意，当设置了 <literal>processUncoveredFilesFromWhitelist="true"</literal> 时将会对源代码文件进行载入，这有可能会导致一些问题，比如，源代码文件包含有处于类或者函数作用域之外的代码。
      </para>
    </note>
  </section>

  <section id="code-coverage-analysis.ignoring-code-blocks">
    <title>略过代码块</title>

    <para>
      <indexterm><primary>Annotation （标注）</primary></indexterm>
      <indexterm><primary>@codeCoverageIgnore</primary></indexterm>
      <indexterm><primary>@codeCoverageIgnoreStart</primary></indexterm>
      <indexterm><primary>@codeCoverageIgnoreEnd</primary></indexterm>

      有时，一些代码块是无法对其进行测试的，因此希望在代码覆盖率分析中忽略它们。PHPUnit 中可以用 <literal>@codeCoverageIgnore</literal>、<literal>@codeCoverageIgnoreStart</literal> 和 <literal>@codeCoverageIgnoreEnd</literal> 标注做到这点，如<xref linkend="code-coverage-analysis.ignoring-code-blocks.examples.Sample.php"/>中所示。
    </para>

    <example id="code-coverage-analysis.ignoring-code-blocks.examples.Sample.php">
      <title><literal>@codeCoverageIgnore</literal>、 <literal>@codeCoverageIgnoreStart</literal> 和 <literal>@codeCoverageIgnoreEnd</literal> 标注的使用</title>
        <programlisting><![CDATA[<?php
/**
 * @codeCoverageIgnore
 */
class Foo
{
    public function bar()
    {
    }
}

class Bar
{
    /**
     * @codeCoverageIgnore
     */
    public function foo()
    {
    }
}

if (FALSE) {
    // @codeCoverageIgnoreStart
    print '*';
    // @codeCoverageIgnoreEnd
}

exit; // @codeCoverageIgnore
?>]]></programlisting>
    </example>

    <para>
      代码中被忽略掉的行（用标注标记为忽略）将会计为已执行（如果它们是可执行的），并且不会在代码覆盖情况中被高亮标记。
    </para>
  </section>

  <section id="code-coverage-analysis.specifying-covered-methods">
    <title>指明要覆盖的方法</title>

    <para>
      <indexterm><primary>Annotation （标注）</primary></indexterm>
      <indexterm><primary>@covers</primary></indexterm>

      The <literal>@covers</literal> 标注（参见<xref linkend="appendixes.annotations.covers.tables.annotations"/>）可以用在测试代码中来指明测试方法想要对哪些方法进行测试。如果提供了这个信息，则只有指定方法的代码覆盖率信息会被统计。<xref linkend="code-coverage-analysis.specifying-covered-methods.examples.BankAccountTest.php"/>展示了一个例子。
    </para>

    <example id="code-coverage-analysis.specifying-covered-methods.examples.BankAccountTest.php">
      <title>指明哪些方法需要覆盖</title>
      <programlisting><![CDATA[<?php
class BankAccountTest extends PHPUnit_Framework_TestCase
{
    protected $ba;

    protected function setUp()
    {
        $this->ba = new BankAccount;
    }

    /**
     * @covers BankAccount::getBalance
     */
    public function testBalanceIsInitiallyZero()
    {
        $this->assertEquals(0, $this->ba->getBalance());
    }

    /**
     * @covers BankAccount::withdrawMoney
     */
    public function testBalanceCannotBecomeNegative()
    {
        try {
            $this->ba->withdrawMoney(1);
        }

        catch (BankAccountException $e) {
            $this->assertEquals(0, $this->ba->getBalance());

            return;
        }

        $this->fail();
    }

    /**
     * @covers BankAccount::depositMoney
     */
    public function testBalanceCannotBecomeNegative2()
    {
        try {
            $this->ba->depositMoney(-1);
        }

        catch (BankAccountException $e) {
            $this->assertEquals(0, $this->ba->getBalance());

            return;
        }

        $this->fail();
    }

    /**
     * @covers BankAccount::getBalance
     * @covers BankAccount::depositMoney
     * @covers BankAccount::withdrawMoney
     */
    public function testDepositWithdrawMoney()
    {
        $this->assertEquals(0, $this->ba->getBalance());
        $this->ba->depositMoney(1);
        $this->assertEquals(1, $this->ba->getBalance());
        $this->ba->withdrawMoney(1);
        $this->assertEquals(0, $this->ba->getBalance());
    }
}
?>]]></programlisting>
    </example>

    <para>
      <indexterm><primary>Annotation （标注）</primary></indexterm>
      <indexterm><primary>@coversNothing</primary></indexterm>

      同时，可以用 <literal>@coversNothing</literal> 标注来指定一个测试不覆盖<emphasis>任何</emphasis>方法。（参见<xref linkend="appendixes.annotations.coversNothing"/>）。在编写集成测试时，可以以此来确保代码覆盖全部来自单元测试。
      It is also possible to specify that a test should not cover 
      <emphasis>any</emphasis> method by using the 
      <literal>@coversNothing</literal> annotation (see
      <xref linkend="appendixes.annotations.coversNothing"/>). This can be
      helpful when writing integration tests to make sure you only 
      generate code coverage with unit tests.
    </para>

    <example id="code-coverage-analysis.specifying-covered-methods.examples.GuestbookIntegrationTest.php">
      <title>指明不覆盖任何方法的测试</title>

      <programlisting><![CDATA[<?php
class GuestbookIntegrationTest extends PHPUnit_Extensions_Database_TestCase
{
    /**
     * @coversNothing
     */
    public function testAddEntry()
    {
        $guestbook = new Guestbook();
        $guestbook->addEntry("suzy", "Hello world!");

        $queryTable = $this->getConnection()->createQueryTable(
            'guestbook', 'SELECT * FROM guestbook'
        );

        $expectedTable = $this->createFlatXmlDataSet("expectedBook.xml")
                              ->getTable("guestbook");

        $this->assertTablesEqual($expectedTable, $queryTable);
    }
}
?>]]>
      </programlisting>
    </example>
  </section>

  <section id="code-coverage-analysis.edge-cases">
    <title>边缘情况</title>

    <para>
      本节中展示了一些值得注意的边缘情况，这些边缘情况可能令代码覆盖率信息变得让人迷惑。
    </para>


    <example id="code-coverage-analysis.edge-cases.examples.Sample.php">
      <programlisting><![CDATA[<?php
// 因为覆盖率是“基于行”而不是基于语句的，
// 每行只会有一种覆盖状态。
if(false) this_function_call_shows_up_as_covered();

// 由于代码覆盖率的内部工作方式，这两行显得很特别。
// 这一行会显示为非可执行。
if(false)
    // 这一行会显示为已覆盖，
    // 实际上是上一行的 if 语句的覆盖信息显示在这了！
    will_also_show_up_as_coveraged();

// 为了避免这种情况，必须使用大括号
if(false) {
    this_call_will_never_show_up_as_covered();
}
?>]]></programlisting>
    </example>
  </section>
</chapter>