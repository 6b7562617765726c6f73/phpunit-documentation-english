<?xml version="1.0" encoding="utf-8" ?>

<chapter id="code-coverage-analysis">
  <title>代码覆盖率分析</title>

  <blockquote>
    <attribution>Murali Nandigama</attribution>
    <para>
      测试之美不在力，在乎效率之间也。
    </para>
    <para>
      知何物需测是为美，知何物已测亦为美。
    </para>
  </blockquote>

  <para>
    <indexterm><primary>Code Coverage （代码覆盖率）</primary></indexterm>

    在本章中，你将学到 PHPUnit 代码覆盖率功能的一切。这个功能能洞察测试运行过程中执行了生产代码的哪些部分。他能够帮助回答诸如这些问题：
  </para>

  <itemizedlist>
    <listitem>
      <para>
        如何找到尚未被测试的代码——或者换句话说，尚未被测试<emphasis>覆盖</emphasis>的？
      </para>
    </listitem>
    <listitem>
      <para>如何衡量测试的完整度？</para>
    </listitem>
  </itemizedlist>

  <para>
    关于代码覆盖率统计是什么意思，举个例子，假如有个方法有100行代码，而在测试运行过程中实际上只执行了其中的75行，那么这个方法就有75%的代码覆盖率。
  </para>

  <para>
    <indexterm><primary>Xdebug</primary></indexterm>

    PHPUnit 的代码覆盖率功能使用了 <ulink url="http://github.com/sebastianbergmann/php-code-coverage">PHP_CodeCoverage</ulink> 组件，这反过来又利用了 <ulink url="http://www.xdebug.org/">Xdebug</ulink> 扩展为 PHP 提供的语句覆盖率功能。
  </para>

  <para>
    让我们来为<xref linkend="test-driven-development.bankaccount-example.examples.BankAccount2.php" />中的 <literal>BankAccount</literal> 类生成一份代码覆盖率报告。
  </para>

  <screen><userinput>phpunit --coverage-html ./report BankAccountTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

...

Time: 0 seconds

OK (3 tests, 3 assertions)

Generating report, this may take a moment.</screen>

  <para>
    <xref linkend="code-coverage-analysis.figures.Code_Coverage.png" />是代码覆盖率报告的摘录。测试运行时被执行到的代码行高亮标为绿色，可执行但是未被执行到的代码行标为红色，“死代码”标为灰色。代码行左边的数字表明有多少测试覆盖了此行。
  </para>

  <figure id="code-coverage-analysis.figures.Code_Coverage.png">
    <title>setBalance() 的代码覆盖情况</title>

    <graphic fileref="figures/Code_Coverage.png" />
  </figure>

  <para>
    点击已覆盖的代码行的行号将会打开一个面板（参见<xref linkend="code-coverage-analysis.figures.Code_Coverage2.png"/>），显示出所有覆盖了本行的测试用例。
  </para>

  <figure id="code-coverage-analysis.figures.Code_Coverage2.png">
    <title>带有覆盖本行代码的测试的信息的面板</title>

    <graphic fileref="figures/Code_Coverage2.png" />
  </figure>

  <para>
    对于 <literal>BankAccount</literal> 这个例子，代码覆盖率报告显示目前没有任何测试以合法值调用 <literal>setBalance()</literal>、 <literal>depositMoney()</literal> 和 <literal>withdrawMoney()</literal> 方法。<xref linkend="code-coverage-analysis.examples.BankAccountTest.php" />展示了一个可以加到 <literal>BankAccountTest</literal> 测试用例类中来完全覆盖 <literal>BankAccount</literal> 类的测试。
  </para>

  <example id="code-coverage-analysis.examples.BankAccountTest.php">
    <title>达成完全覆盖所缺少的测试</title>
    <programlisting><![CDATA[<?php
require_once 'BankAccount.php';

class BankAccountTest extends PHPUnit_Framework_TestCase
{
    // ...

    public function testDepositWithdrawMoney()
    {
        $this->assertEquals(0, $this->ba->getBalance());
        $this->ba->depositMoney(1);
        $this->assertEquals(1, $this->ba->getBalance());
        $this->ba->withdrawMoney(1);
        $this->assertEquals(0, $this->ba->getBalance());
    }
}
?>]]></programlisting>
  </example>

  <para>
    <xref linkend="code-coverage-analysis.figures.Code_Coverage3.png" />展示了加入额外的测试之后 <literal>setBalance()</literal> 方法的代码覆盖情况。
  </para>

  <figure id="code-coverage-analysis.figures.Code_Coverage3.png">
    <title>加上附加方法之后 <literal>setBalance()</literal> 的代码覆盖情况</title>

    <graphic fileref="figures/Code_Coverage3.png" />
  </figure>

  <section id="code-coverage-analysis.specifying-covered-methods">
    <title>指明要覆盖的方法</title>

    <para>
      <indexterm><primary>Annotation （标注）</primary></indexterm>
      <indexterm><primary>@covers</primary></indexterm>

      The <literal>@covers</literal> 标注（参见<xref linkend="appendixes.annotations.covers.tables.annotations"/>）可以用在测试代码中来指明测试方法想要对哪些方法进行测试。如果提供了这个信息，那么只有指定的方法的代码覆盖率信息会被统计。<xref linkend="code-coverage-analysis.specifying-covered-methods.examples.BankAccountTest.php"/>展示了一个例子。
    </para>

    <example id="code-coverage-analysis.specifying-covered-methods.examples.BankAccountTest.php">
      <title>指明了要覆盖哪些方法的测试</title>
      <programlisting><![CDATA[<?php
require_once 'BankAccount.php';

class BankAccountTest extends PHPUnit_Framework_TestCase
{
    protected $ba;

    protected function setUp()
    {
        $this->ba = new BankAccount;
    }

    /**
     * @covers BankAccount::getBalance
     */
    public function testBalanceIsInitiallyZero()
    {
        $this->assertEquals(0, $this->ba->getBalance());
    }

    /**
     * @covers BankAccount::withdrawMoney
     */
    public function testBalanceCannotBecomeNegative()
    {
        try {
            $this->ba->withdrawMoney(1);
        }

        catch (BankAccountException $e) {
            $this->assertEquals(0, $this->ba->getBalance());

            return;
        }

        $this->fail();
    }

    /**
     * @covers BankAccount::depositMoney
     */
    public function testBalanceCannotBecomeNegative2()
    {
        try {
            $this->ba->depositMoney(-1);
        }

        catch (BankAccountException $e) {
            $this->assertEquals(0, $this->ba->getBalance());

            return;
        }

        $this->fail();
    }

    /**
     * @covers BankAccount::getBalance
     * @covers BankAccount::depositMoney
     * @covers BankAccount::withdrawMoney
     */

    public function testDepositWithdrawMoney()
    {
        $this->assertEquals(0, $this->ba->getBalance());
        $this->ba->depositMoney(1);
        $this->assertEquals(1, $this->ba->getBalance());
        $this->ba->withdrawMoney(1);
        $this->assertEquals(0, $this->ba->getBalance());
    }
}
?>]]></programlisting>
    </example>

    <para>
      <indexterm><primary>Annotation （标注）</primary></indexterm>
      <indexterm><primary>@coversNothing</primary></indexterm>

      可以用 <literal>@coversNothing</literal> 标注来指定一个测试不覆盖<emphasis>任何</emphasis>方法。（参见<xref linkend="appendixes.annotations.coversNothing"/>）。这可以在编写集成测试时用来确保只生成单元测试的代码覆盖率。
    </para>

    <example id="code-coverage-analysis.specifying-covered-methods.examples.GuestbookIntegrationTest.php">
      <title>指明了不覆盖任何方法的测试</title>
      <programlisting><![CDATA[<?php
class GuestbookIntegrationTest extends PHPUnit_Extensions_Database_TestCase
{
    /**
     * @coversNothing
     */
    public function testAddEntry()
    {
        $guestbook = new Guestbook();
        $guestbook->addEntry("suzy", "Hello world!");

        $queryTable = $this->getConnection()->createQueryTable(
            'guestbook', 'SELECT * FROM guestbook'
        );
        $expectedTable = $this->createFlatXmlDataSet("expectedBook.xml")
                              ->getTable("guestbook");
        $this->assertTablesEqual($expectedTable, $queryTable);
    }
}
?>]]>
      </programlisting>
    </example>
  </section>

  <section id="code-coverage-analysis.ignoring-code-blocks">
    <title>忽略代码块</title>

    <para>
      <indexterm><primary>Annotation （标注）</primary></indexterm>
      <indexterm><primary>@codeCoverageIgnore</primary></indexterm>
      <indexterm><primary>@codeCoverageIgnoreStart</primary></indexterm>
      <indexterm><primary>@codeCoverageIgnoreEnd</primary></indexterm>

      有时候有一些代码块是无法对其进行测试的，因此希望在代码覆盖率分析中忽略它们。PHPUnit 允许你用 <literal>@codeCoverageIgnore</literal>、<literal>@codeCoverageIgnoreStart</literal> 和 <literal>@codeCoverageIgnoreEnd</literal> 标注做到这点，如<xref linkend="code-coverage-analysis.ignoring-code-blocks.examples.Sample.php"/>中所示。
    </para>

    <example id="code-coverage-analysis.ignoring-code-blocks.examples.Sample.php">
      <title><literal>@codeCoverageIgnore</literal>、 <literal>@codeCoverageIgnoreStart</literal> 和 <literal>@codeCoverageIgnoreEnd</literal> 标注的使用</title>
        <programlisting><![CDATA[<?php
/**
 * @codeCoverageIgnore
 */
class Foo
{
    public function bar()
    {
    }
}

class Bar
{
    /**
     * @codeCoverageIgnore
     */
    public function foo()
    {
    }
}

if (FALSE) {
    // @codeCoverageIgnoreStart
    print '*';
    // @codeCoverageIgnoreEnd
}
?>]]></programlisting>
    </example>

    <para>
      用标注标记为需要忽略的代码行将会记为已执行（如果它们是可执行的），并且不会在代码覆盖情况中被高亮标记。
    </para>
  </section>

  <section id="code-coverage-analysis.including-excluding-files">
    <title>Including and Excluding Files</title>

    <para>
      <indexterm><primary>Code Coverage</primary></indexterm>
      <indexterm><primary>Blacklist</primary></indexterm>
      <indexterm><primary>Whitelist</primary></indexterm>

      By default, all sourcecode files that contain at least one line of code
      that has been executed (and only these files) are included in the report.
      The sourcecode files that are included in the report can be filtered by
      using a blacklist or a whitelist approach.
    </para>

    <para>
      The blacklist is pre-filled with all sourcecode files of PHPUnit itself
      as well as the tests. When the whitelist is empty (default), blacklisting
      is used. When the whitelist is not empty, whitelisting is used. Each file
      on the whitelist is added to the code coverage report regardless of
      whether or not it was executed. All lines of such a file, including those
      that are not executable, are counted as not executed.
    </para>

    <para>
      When you set <literal>processUncoveredFilesFromWhitelist="true"</literal>
      in your PHPUnit configuration (see <xref
      linkend="appendixes.configuration.blacklist-whitelist"/>) then these files
      will be included by PHP_CodeCoverage to properly calculate the number of
      executable lines.
    </para>

    <note>
      <para>
        Please note that the loading of sourcecode files that is performed when
        <literal>processUncoveredFilesFromWhitelist="true"</literal> is set can
        cause problems when a sourcecode file contains code outside the scope of
        a class or function, for instance.
      </para>
    </note>

    <para>
      PHPUnit's XML configuration file (see <xref linkend="appendixes.configuration.blacklist-whitelist"/>)
      can be used to control the blacklist and the whitelist. Using a whitelist
      is the recommended best practice to control the list of files included in
      the code coverage report.
    </para>
  </section>

  <section id="code-coverage-analysis.edge-cases">
    <title>Edge cases</title>

    <para>
      For the most part it can safely be said that PHPUnit offers you "line
      based" code coverage information but due to how that information is
      collected there are some noteworthy edge cases.
    </para>

    <example id="code-coverage-analysis.edge-cases.examples.Sample.php">
      <programlisting><![CDATA[<?php
// Because it is "line based" and not statement base coverage
// one line will always have one coverage status
if(false) this_function_call_shows_up_as_covered();

// Due to how code coverage works internally these two lines are special.
// This line will show up as non executable
if(false)
    // This line will show up as covered because it is actually the 
    // coverage of the if statement in the line above that gets shown here!
    will_also_show_up_as_coveraged();

// To avoid this it is necessary that braces are used
if(false) {
    this_call_will_never_show_up_as_covered();
}
?>]]></programlisting>
    </example>      
        
  </section>

</chapter>
