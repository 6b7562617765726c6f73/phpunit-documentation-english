<?xml version="1.0" encoding="utf-8" ?>

<chapter id="selenium">
  <title>PHPUnit 与 Selenium</title>

  <section id="selenium.selenium-rc">
    <title>Selenium Server</title>

    <para>
      <indexterm><primary>Selenium Server</primary></indexterm>

      <ulink url="http://seleniumhq.org/">Selenium Server</ulink> 是一个测试工具，允许你用任意主流浏览器为任意 HTTP 网站上的用任意编程语言开发的 web 应用程序编写自动用户界面测试。它通过操作系统来驱动浏览器进程来执行自动测试。Selenium 测试直接运行于某个浏览器中，就和真实用户一样。这些测试既可以用于<emphasis>验收测试</emphasis>（通过在集成好的系统中执行较高层面的测试而非仅对系统的各个单元分别单独测试。）也可以用于<emphasis>浏览器兼容性测试</emphasis>（通过在不同的操作系统与浏览器上对 web 应用程序进行测试）。
    </para>
    
    <para>
      PHPUnit_Selenium 只支持 Selenium 2.x 服务器的脚本。服务器可以通过从 1.x 就提供的传统 Selenium RC API 访问，也可以从 PHPUnit_Selenium 1.2 用 WebDriver API（部分实现）访问。
    </para>
    <para>
      这个决定的原因是 Selenium 2 是向后兼容的，而 Selenium RC 已经不再维护了。
    </para>

  </section>

  <section id="selenium.installation">
    <title>安装</title>

    <para>
      首先，安装 Selenium Server：
    </para>

    <orderedlist>
      <listitem>下载 <ulink url="http://seleniumhq.org/download/">Selenium Server</ulink>的分发档。</listitem>
      <listitem>将分发档解压，然后将 <filename>selenium-server-standalone-2.9.0.jar</filename>（注意版本后缀） 复制到比如说 <filename>/usr/local/bin</filename>。</listitem>
      <listitem>运行 <userinput>java -jar /usr/local/bin/selenium-server-standalone-2.9.0.jar</userinput> 来启动 Selenium Server 服务器端。</listitem>
    </orderedlist>

    <para>
      其次，安装 PHPUnit_Selenium 组件包，这是从 PHPUnit 原生地访问 Selenium Server 所必须的：
      <screen><userinput>pear install phpunit/PHPUnit_Selenium</userinput></screen>
    </para>

    <para>
      现在可以用 Selenium Server 的客户端/服务器端协议来向它发送命令了。
    </para>
  </section>

  <section id="selenium.selenium2testcase">
    <title>PHPUnit_Extensions_Selenium2TestCase</title>

    <para>
      <indexterm><primary><literal>PHPUnit_Extensions_Selenium2TestCase</literal></primary></indexterm>

      <literal>PHPUnit_Extensions_Selenium2TestCase</literal> 测试用例让你能够使用 WebDriver API（部分实现）。
    </para>

    <para>
      <xref linkend="selenium.selenium2testcase.examples.WebTest.php" />展示了如何测试 <systemitem role="URL">http://www.example.com/</systemitem> 网站的 <literal><![CDATA[<title>]]></literal> 元素的内容。
    </para>
    <example id="selenium.selenium2testcase.examples.WebTest.php">
      <title>PHPUnit_Extensions_Selenium2TestCase 的用法范例</title>
      <programlisting><![CDATA[<?php
class WebTest extends PHPUnit_Extensions_Selenium2TestCase
{
    protected function setUp()
    {
        $this->setBrowser('firefox');
        $this->setBrowserUrl('http://www.example.com/');
    }

    public function testTitle()
    {
        $this->url('http://www.example.com/');
        $this->assertEquals('Example WWW Page', $this->title());
    }

}
?>]]></programlisting>
      <screen><userinput>phpunit WebTest</userinput><![CDATA[
PHPUnit 3.6.10 by Sebastian Bergmann.

F

Time: 28 seconds, Memory: 3.00Mb

There was 1 failure:

1) WebTest::testTitle
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'Example WWW Page'
+'IANA — Example domains'

/home/giorgio/WebTest.php:13

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen></example>

  <para>    
    Selenium2TestCare 的命令是通过 __call() 来实现的。请参考 <ulink url="https://github.com/sebastianbergmann/phpunit-selenium/blob/master/Tests/Selenium2TestCaseTest.php">the end-to-end test for PHPUnit_Extensions_Selenium2TestCase</ulink> 以获取所有受支持的特性的列表。
  </para>
  </section>

  <section id="selenium.seleniumtestcase">
    <title>PHPUnit_Extensions_SeleniumTestCase</title>

    <para>
      <indexterm><primary><literal>PHPUnit_Extensions_SeleniumTestCase</literal></primary></indexterm>

      <literal>PHPUnit_Extensions_SeleniumTestCase</literal> 测试用例扩展实现了客户端/服务器端协议来与 Selenium Server 沟通，同时还为 web 测试实现了一些特殊的断言方法。
    </para>

    <para>
      <xref linkend="selenium.seleniumtestcase.examples.WebTest.php" />展示了如何测试 <systemitem role="URL">http://www.example.com/</systemitem> 网站的 <literal><![CDATA[<title>]]></literal> 元素的内容。
    </para>

    <example id="selenium.seleniumtestcase.examples.WebTest.php">
      <title>PHPUnit_Extensions_SeleniumTestCase 的用法范例</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Extensions/SeleniumTestCase.php';

class WebTest extends PHPUnit_Extensions_SeleniumTestCase
{
    protected function setUp()
    {
        $this->setBrowser('*firefox');
        $this->setBrowserUrl('http://www.example.com/');
    }

    public function testTitle()
    {
        $this->open('http://www.example.com/');
        $this->assertTitle('Example WWW Page');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit WebTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 9 seconds, Memory: 6.00Mb

There was 1 failure:

1) WebTest::testTitle
Current URL: http://www.iana.org/domains/example/

Failed asserting that 'IANA — Example domains' matches PCRE pattern "/Example WWW Page/".


FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>


    <para>
      与 <literal>PHPUnit_Framework_TestCase</literal> 类不同，扩展自 <literal>PHPUnit_Extensions_SeleniumTestCase</literal> 的测试用例类必须提供 <literal>setUp()</literal> 方法。这个方法用来配置 Selenium Server 会话。<xref linkend="selenium.seleniumtestcase.tables.seleniumrc-api.setup" />中列出了所有用于这方面的方法。
    </para>

    <table id="selenium.seleniumtestcase.tables.seleniumrc-api.setup">
      <title>Selenium Server API: 建立</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>方法</entry>
            <entry>含义</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void setBrowser(string $browser)</literal></entry>
            <entry>设置用于 Selenium Server 服务器的浏览器。</entry>
          </row>
          <row>
            <entry><literal>void setBrowserUrl(string $browserUrl)</literal></entry>
            <entry>设置测试的基准 URL (base URL)。</entry>
          </row>
          <row>
            <entry><literal>void setHost(string $host)</literal></entry>
            <entry>设定 Selenium Server 服务器连接的主机名。</entry>
          </row>
          <row>
            <entry><literal>void setPort(int $port)</literal></entry>
            <entry>设定 Selenium Server 服务器连接的端口号。</entry>
          </row>
          <row>
            <entry><literal>void setTimeout(int $timeout)</literal></entry>
            <entry>设定 Selenium Server 服务器连接的超时时间。</entry>
          </row>
          <row>
            <entry><literal>void setSleep(int $seconds)</literal></entry>
            <entry>设定 Selenium Server 客户端向 Selenium Server 服务器端发送动作多个命令之间需要休眠的秒数</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      PHPUnit 还可以在 Selenium 测试失败时截屏。要启用这个功能，在测试用例类里设置 <literal>$captureScreenshotOnFailure</literal>、
      <literal>$screenshotPath</literal> 和 <literal>$screenshotUrl</literal>，如
      <xref linkend="selenium.seleniumtestcase.examples.WebTest2.php" />中所示。
    </para>

    <example id="selenium.seleniumtestcase.examples.WebTest2.php">
      <title>Capturing a screenshot when a test fails</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Extensions/SeleniumTestCase.php';

class WebTest extends PHPUnit_Extensions_SeleniumTestCase
{
    protected $captureScreenshotOnFailure = TRUE;
    protected $screenshotPath = '/var/www/localhost/htdocs/screenshots';
    protected $screenshotUrl = 'http://localhost/screenshots';

    protected function setUp()
    {
        $this->setBrowser('*firefox');
        $this->setBrowserUrl('http://www.example.com/');
    }

    public function testTitle()
    {
        $this->open('http://www.example.com/');
        $this->assertTitle('Example WWW Page');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit WebTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 7 seconds, Memory: 6.00Mb

There was 1 failure:

1) WebTest::testTitle
Current URL: http://www.iana.org/domains/example/
Screenshot: http://localhost/screenshots/334b080f2364b5f11568ee1c7f6742c9.png

Failed asserting that 'IANA — Example domains' matches PCRE pattern "/Example WWW Page/".


FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>

    <para>
      You can run each test using a set of browsers: Instead of using
      <literal>setBrowser()</literal> to set up one browser you declare a
      <literal>public static</literal> array named <literal>$browsers</literal>
      in your test case class. Each item in this array describes one browser
      configuration. Each of these browsers can be hosted by different
      Selenium Server servers.
      <xref linkend="selenium.seleniumtestcase.examples.WebTest3.php" /> shows
      an example.
    </para>

    <example id="selenium.seleniumtestcase.examples.WebTest3.php">
      <title>Setting up multiple browser configurations</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Extensions/SeleniumTestCase.php';

class WebTest extends PHPUnit_Extensions_SeleniumTestCase
{
    public static $browsers = array(
      array(
        'name'    => 'Firefox on Linux',
        'browser' => '*firefox',
        'host'    => 'my.linux.box',
        'port'    => 4444,
        'timeout' => 30000,
      ),
      array(
        'name'    => 'Safari on MacOS X',
        'browser' => '*safari',
        'host'    => 'my.macosx.box',
        'port'    => 4444,
        'timeout' => 30000,
      ),
      array(
        'name'    => 'Safari on Windows XP',
        'browser' => '*custom C:\Program Files\Safari\Safari.exe -url',
        'host'    => 'my.windowsxp.box',
        'port'    => 4444,
        'timeout' => 30000,
      ),
      array(
        'name'    => 'Internet Explorer on Windows XP',
        'browser' => '*iexplore',
        'host'    => 'my.windowsxp.box',
        'port'    => 4444,
        'timeout' => 30000,
      )
    );

    protected function setUp()
    {
        $this->setBrowserUrl('http://www.example.com/');
    }

    public function testTitle()
    {
        $this->open('http://www.example.com/');
        $this->assertTitle('Example Web Page');
    }
}
?>]]></programlisting>
    </example>

    <para>
      <literal>PHPUnit_Extensions_SeleniumTestCase</literal> can collect code
      coverage information for tests run through Selenium:
    </para>

    <orderedlist>
      <listitem>Copy <filename>PHPUnit/Extensions/SeleniumCommon/phpunit_coverage.php</filename> into your webserver's document root directory.</listitem>
      <listitem>In your webserver's <filename>php.ini</filename> configuration file, configure <filename>PHPUnit/Extensions/SeleniumCommon/prepend.php</filename> and <filename>PHPUnit/Extensions/SeleniumCommon/append.php</filename> as the <literal>auto_prepend_file</literal> and <literal>auto_append_file</literal>, respectively.</listitem>
      <listitem>In your test case class that extends <literal>PHPUnit_Extensions_SeleniumTestCase</literal>, use <programlisting>protected $coverageScriptUrl = 'http://host/phpunit_coverage.php';</programlisting> to configure the URL for the <filename>phpunit_coverage.php</filename> script.</listitem>
    </orderedlist>

    <para>
      <xref linkend="selenium.seleniumtestcase.tables.assertions" /> lists the
      various assertion methods that <literal>PHPUnit_Extensions_SeleniumTestCase</literal>
      provides.
    </para>

    <table id="selenium.seleniumtestcase.tables.assertions">
      <title>Assertions</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Assertion</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void assertElementValueEquals(string $locator, string $text)</literal></entry>
            <entry>Reports an error if the value of the element identified by <literal>$locator</literal> is not equal to the given <literal>$text</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertElementValueNotEquals(string $locator, string $text)</literal></entry>
            <entry>Reports an error if the value of the element identified by <literal>$locator</literal> is equal to the given <literal>$text</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertElementValueContains(string $locator, string $text)</literal></entry>
            <entry>Reports an error if the value of the element identified by <literal>$locator</literal> does not contain the given <literal>$text</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertElementValueNotContains(string $locator, string $text)</literal></entry>
            <entry>Reports an error if the value of the element identified by <literal>$locator</literal> contains the given <literal>$text</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertElementContainsText(string $locator, string $text)</literal></entry>
            <entry>Reports an error if the element identified by <literal>$locator</literal> does not contain the given <literal>$text</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertElementNotContainsText(string $locator, string $text)</literal></entry>
            <entry>Reports an error if the element identified by <literal>$locator</literal> contains the given <literal>$text</literal>.</entry>
          </row>
          <row>
            <entry><literal>void assertSelectHasOption(string $selectLocator, string $option)</literal></entry>
            <entry>Reports an error if the given option is not available.</entry>
          </row>
          <row>
            <entry><literal>void assertSelectNotHasOption(string $selectLocator, string $option)</literal></entry>
            <entry>Reports an error if the given option is available.</entry>
          </row>
          <row>
            <entry><literal>void assertSelected($selectLocator, $option)</literal></entry>
            <entry>Reports an error if the given label is not selected.</entry>
          </row>
          <row>
            <entry><literal>void assertNotSelected($selectLocator, $option)</literal></entry>
            <entry>Reports an error if the given label is selected.</entry>
          </row>
          <row>
            <entry><literal>void assertIsSelected(string $selectLocator, string $value)</literal></entry>
            <entry>Reports an error if the given value is not selected.</entry>
          </row>
          <row>
            <entry><literal>void assertIsNotSelected(string $selectLocator, string $value)</literal></entry>
            <entry>Reports an error if the given value is selected.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      <xref linkend="selenium.seleniumtestcase.tables.template-methods" /> shows
      the template method of <literal>PHPUnit_Extensions_SeleniumTestCase</literal>:
    </para>

    <table id="selenium.seleniumtestcase.tables.template-methods">
      <title>Template Methods</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void defaultAssertions()</literal></entry>
            <entry>Override to perform assertions that are shared by all tests of a test case. This method is called after each command that is sent to the Selenium Server server.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      Please refer to the <ulink url="http://release.seleniumhq.org/selenium-core/1.0.1/reference.html">documentation of Selenium commands</ulink>
      for a reference of the commands available and how they are used.
    </para>
    <para>
    The commands of Selenium 1 are implemented dynamically via __call. Refer also to <ulink url="https://github.com/sebastianbergmann/phpunit-selenium/blob/master/PHPUnit/Extensions/SeleniumTestCase/Driver.php#L410">the API docs for PHPUnit_Extensions_SeleniumTestCase_Driver::__call()</ulink> for a list of all the supported methods on the PHP side, along with arguments and return type where available.
    </para>

    <para>
      Using the <literal>runSelenese($filename)</literal> method, you can also
      run a Selenium test from its Selenese/HTML specification. Furthermore,
      using the static attribute <literal>$seleneseDirectory</literal>, you can
      automatically create test objects from a directory that contains
      Selenese/HTML files. The specified directory is recursively searched for
      <literal>.htm</literal> files that are expected to contain Selenese/HTML.
      <xref linkend="selenium.seleniumtestcase.examples.WebTest4.php" /> shows an
      example.
    </para>

    <example id="selenium.seleniumtestcase.examples.WebTest4.php">
      <title>Use a directory of Selenese/HTML files as tests</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Extensions/SeleniumTestCase.php';

class SeleneseTests extends PHPUnit_Extensions_SeleniumTestCase
{
    public static $seleneseDirectory = '/path/to/files';
}
?>]]></programlisting>
    </example>

    <para>
    From Selenium 1.1.1, an experimental feature is included allowing the user to share the session between tests. The only supported case is to share the session between all tests when a single browser is used.
    Call <literal>PHPUnit_Extensions_SeleniumTestCase::shareSession(true)</literal> in your bootstrap file to enable session sharing.
    The session will be reset in the case of not successul tests (failed or incomplete); it is up to the user to avoid interactions between tests by resetting cookies or logging out from the application under test (with a tearDown() method).
    </para>
  </section>
</chapter>
