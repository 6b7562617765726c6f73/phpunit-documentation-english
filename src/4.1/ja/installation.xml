<?xml version="1.0" encoding="utf-8" ?>

<chapter id="installation">
  <title>PHPUnit のインストール</title>

  <note>
    <para>
      以前のバージョンの PHPUnit からのアップグレードをする場合は、
      <xref linkend="appendixes.upgrading.phpunit-4-1"/> を参照ください。
    </para>
  </note>

  <section id="installation.requirements">
    <title>要件</title>

    <para>
      PHPUnit 4.1 は PHP 5.3.3 以降のバージョンで動作しますが、最新版の PHP
      を使うことを強く推奨します。
    </para>

    <para>
      PHPUnit を使うには、拡張モジュール <ulink
      url="http://php.net/manual/ja/dom.setup.php">dom</ulink>、<ulink
      url="http://php.net/manual/ja/json.installation.php">json</ulink>、
      <ulink
      url="http://php.net/manual/ja/pcre.installation.php">pcre</ulink>、
      <ulink
      url="http://php.net/manual/ja/reflection.installation.php">reflection</ulink>、
      そして <ulink url="http://php.net/manual/ja/spl.installation.php">spl</ulink>
      が必要です。これらは、通常はデフォルトでコンパイルされて有効になっています。
      中には無効にすることすらできず、常に有効になっているものもあります。
    </para>

    <para>
      コードカバレッジをサポートするには <ulink url="http://xdebug.org/">Xdebug</ulink>
      2.1.3 以降が必要です。
      しかし、最新版の Xdebug を使うことを強く推奨します。
      また、コードカバレッジ機能を利用するには、 <ulink
      url="http://php.net/manual/ja/tokenizer.installation.php">tokenizer</ulink>
      拡張モジュールも必要です。
      コードカバレッジ情報を XML 形式で記録するには、<ulink
      url="http://php.net/manual/ja/xmlwriter.installation.php">xmlwriter</ulink>
      拡張モジュールも必要です。
    </para>

    <para>
      PHPUnit を PHP Archive (PHAR) から使うには、<ulink
      url="http://php.net/manual/ja/phar.installation.php">phar</ulink>
      拡張モジュールが必要です。
      <ulink url="http://suhosin.org/">Suhosin</ulink> 拡張モジュールを使っている環境で
      PHPUnit を PHP Archive (PHAR)
      から使いたい場合は、
      <literal>suhosin.executor.include.whitelist = phar</literal> の設定が必要です。
    </para>

    <para>
      PHPUnit の PHAR で <literal>--self-update</literal> 機能を使うには、<ulink
      url="http://php.net/manual/ja/openssl.installation.php">openssl</ulink>
      拡張モジュールが必要です。
    </para>
  </section>

  <section id="installation.phar">
    <title>PHP Archive (PHAR)</title>

    <para>
      PHPUnit を入手する一番簡単な方法は、<ulink
      url="http://php.net/phar">PHP Archive (PHAR)</ulink> をダウンロードすることです。
      必要な依存コンポーネントがすべて (オプションのコンポーネントの一部も含めて)
      ひとつのファイルにまとめられています。
    </para>

    <screen><userinput>wget https://phar.phpunit.de/phpunit.phar</userinput>
<userinput>chmod +x phpunit.phar</userinput>
<userinput>mv phpunit.phar /usr/local/bin/phpunit</userinput></screen>

    <note>
      <para>
        <literal>https://phar.phpunit.de/</literal> からダウンロードするには、
        <ulink
        url="http://en.wikipedia.org/wiki/Server_Name_Indication">TLS/SNI
        をサポートしたクライアント</ulink>、たとえば wget 1.14 以降などが必要です。
      </para>
    </note>

    <para>
      もちろん、ダウンロードした PHAR をそのまますぐに使ってもかまいません。
    </para>

    <screen><userinput>wget https://phar.phpunit.de/phpunit.phar</userinput>
<userinput>php phpunit.phar</userinput></screen>

    <section id="installation.phar.verification">
      <title>Verifying PHPUnit PHAR Releases</title>

      <para>
        All official releases of code distributed by the PHPUnit Project are
        signed by the release manager for the release. PGP signatures and SHA1
        hashes are available for verification on <ulink
        url="https://phar.phpunit.de/">phar.phpunit.de</ulink>.
      </para>

      <para>
        The following example details how release verification works. We start
        by downloading <filename>phpunit.phar</filename> as well as its
        detached PGP signature <filename>phpunit.phar.asc</filename>:
      </para>

      <screen><userinput>wget https://phar.phpunit.de/phpunit.phar</userinput>
<userinput>wget https://phar.phpunit.de/phpunit.phar.asc</userinput></screen>

      <para>
        We want to verify PHPUnit's PHP Archive (<filename>phpunit.phar</filename>)
        against its detached signature (<filename>phpunit.phar.asc</filename>):
      </para>

      <screen><userinput>gpg phpunit.phar.asc</userinput>
gpg: Signature made Sat 19 Jul 2014 01:28:02 PM CEST using RSA key ID 6372C20A
gpg: Can't check signature: public key not found</screen>

      <para>
        We don't have the release manager's public key (<literal>6372C20A</literal>)
        in our local system. In order to proceed with the verification we need
        to retrieve the release manager's public key from a key server. One such
        server is <filename>pgp.uni-mainz.de</filename>. The public key servers
        are linked together, so you should be able to connect to any key server.
      </para>

      <screen><userinput>gpg --keyserver pgp.uni-mainz.de --recv-keys 0x4AA394086372C20A</userinput><![CDATA[
gpg: requesting key 6372C20A from hkp server pgp.uni-mainz.de
gpg: key 6372C20A: public key "Sebastian Bergmann <sb@sebastian-bergmann.de>" imported
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)]]></screen>

      <para>
        Now we have received a public key for an entity known as "Sebastian
        Bergmann &lt;sb@sebastian-bergmann.de&gt;". However, we have no way of
        verifying this key was created by the person known as Sebastian
        Bergmann. But, let's try to verify the release signature again.
      </para>

      <screen><userinput>gpg phpunit.phar.asc</userinput><![CDATA[
gpg: Signature made Sat 19 Jul 2014 01:28:02 PM CEST using RSA key ID 6372C20A
gpg: Good signature from "Sebastian Bergmann <sb@sebastian-bergmann.de>"
gpg:                 aka "Sebastian Bergmann <sebastian@php.net>"
gpg:                 aka "Sebastian Bergmann <sebastian@thephp.cc>"
gpg:                 aka "Sebastian Bergmann <sebastian@phpunit.de>"
gpg:                 aka "Sebastian Bergmann <sebastian.bergmann@thephp.cc>"
gpg:                 aka "[jpeg image of size 40635]"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: D840 6D0D 8294 7747 2937  7831 4AA3 9408 6372 C20A]]></screen>

      <para>
        At this point, the signature is good, but we don't trust this key. A
        good signature means that the file has not been tampered. However, due
        to the nature of public key cryptography, you need to additionally
        verify that key <literal>6372C20A</literal> was created by the real
        Sebastian Bergmann.
      </para>

      <para>
        Any attacker can create a public key and upload it to the public key
        servers. They can then create a malicious release signed by this fake
        key. Then, if you tried to verify the signature of this corrupt release,
        it would succeed because the key was not the "real" key. Therefore, you
        need to validate the authenticity of this key. Validating the
        authenticity of a public key, however, is outside the scope of this
        documentation.
      </para>
    </section>
  </section>

  <section id="installation.composer">
    <title>Composer</title>

    <para>
      <ulink url="http://getcomposer.org/">Composer</ulink>
      を使ってプロジェクトの依存関係を管理するには、
      <literal>phpunit/phpunit</literal> への依存情報をプロジェクトの
      <filename>composer.json</filename> ファイルに追加します。
      次に示すのは最小限の
      <filename>composer.json</filename> ファイルの例で、
      開発時の PHPUnit 4.1 への依存を定義しています。
    </para>

    <programlisting><![CDATA[{
    "require-dev": {
        "phpunit/phpunit": "4.1.*"
    }
}]]></programlisting>

    <para>
      システム全体で使えるように Composer でインストールするには、次のようにします。
    </para>

    <screen><userinput>composer global require "phpunit/phpunit=4.1.*"</userinput></screen>

    <para>
      <literal>~/.composer/vendor/bin/</literal> にパスを通すことを忘れないようにしましょう。
    </para>
  </section>

  <section id="installation.optional-packages">
    <title>オプションのパッケージ</title>

    <para>
      オプションのパッケージとして、これらが使えます。
    </para>

    <variablelist>
      <varlistentry>
        <term>
          <literal>PHP_Invoker</literal>
        </term>

        <listitem>
          <para>
            callable をタイムアウトつきで実行するユーティリティクラス。
            テストのタイムアウトを厳格に指定するために必要なパッケージ。
          </para>

          <para>
            このパッケージは、PHPUnit の PHAR 版の中に含まれています。
            Composer でインストールするには、
            <literal>"require-dev"</literal>
            に次の行を追加します。
          </para>

          <screen><userinput>"phpunit/php-invoker": "*"</userinput></screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>DbUnit</literal>
        </term>
        <listitem>
          <para>
            DbUnit の PHP/PHPUnit 向けの移植。データベースとのやりとりをテスト可能にする。
          </para>

          <para>
            このパッケージは、PHPUnit の PHAR 版の中に含まれています。
            Composer でインストールするには、
            <literal>"require-dev"</literal>
            に次の行を追加します。
          </para>

          <screen><userinput>"phpunit/dbunit": ">=1.2"</userinput></screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHPUnit_Selenium</literal>
        </term>
        <listitem>
          <para>
            PHPUnit 用の Selenium RC インテグレーション。
          </para>

          <para>
            このパッケージは、PHPUnit の PHAR 版の中に含まれています。
            Composer でインストールするには、
            <literal>"require-dev"</literal>
            に次の行を追加します。
          </para>

          <screen><userinput>"phpunit/phpunit-selenium": ">=1.2"</userinput></screen>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
</chapter>
