<?xml version="1.0" encoding="utf-8" ?>

<chapter id="installation">
  <title>PHPUnit のインストール</title>

  <para>
    PHPUnit supports two package management systems: PEAR and Composer.
  </para>

  <para>
    Installation via PEAR is supported for every PHPUnit release ever
    while Composer support was added in PHPUnit 3.7 meaning that earlier
    versions can't be installed using it.
  </para>

  <note>
    <para>
      PHPUnit 3.7 は PHP 5.3.3 以降のバージョンで動作しますが、PHP 5.4.7
      以降を使うことを強く推奨します。
    </para>

    <para>
      PHPUnit では PHP_CodeCoverage というライブラリを使ってコードカバレッジ情報を処理していますが、
      このライブラリを使うには Xdebug 2.0.5 以降が必要です。
      しかし、Xdebug 2.2.0 以降を使うことを強く推奨します。
    </para>
  </note>

  <section id="installation.pear">
    <title>PEAR</title>

    <para>
      PEAR インストーラを使って PHPUnit をインストールします。これは
      <ulink url="http://pear.php.net/">PHP Extension and Application
      Repository</ulink> の根幹をなすものであり、
      PHP のパッケージを配布する仕組みを提供しています。
    </para>

    <caution>
      <para>
        OS のディストリビューションや PHP の環境によっては、
        ここで説明する手順を実行する前に
        まず PEAR をインストールしたり既存の PEAR をアップデートしたりする必要があるかもしれません。
      </para>

      <para>
        既存の PEAR 環境のアップデートは、通常は
        <userinput>sudo pear upgrade PEAR</userinput>
        を実行するだけのことです。PEAR の新規インストール方法は
        <ulink url="http://pear.php.net/manual/en/installation.getting.php">PEAR
        マニュアル</ulink> に説明があります。
      </para>
    </caution>

    <para>
      次のふたつのコマンドを実行するだけで (<literal>root</literal> として実行しなければならないかもしれません)、PHPUnit
      に必要なものがすべて PEAR インストーラを使ってインストールできます。
    </para>

    <screen>
      <userinput>pear config-set auto_discover 1</userinput>
      <userinput>pear install pear.phpunit.de/PHPUnit</userinput>
    </screen>

    <para>
      After the installation you can find the PHPUnit source files inside your
      local PEAR directory; the path is usually
      <filename>/usr/lib/php/PHPUnit</filename>.
    </para>

  </section>

  <section id="installation.composer">
    <title>Composer</title>

    <para>
      Starting with PHPUnit 3.7 it can also be installing using
      <ulink url="http://getcomposer.org/">Composer</ulink>,
      the "Dependency Manager for PHP". This guide assumes you already
      know how to use composer and that you have a composer.json file
      in your project.
    </para>

    <para>
      To add PHPUnit as a local, per project, dependency for development add
      the following lines to your composer.json.
    </para>

    <programlisting><![CDATA["require-dev": {
    "phpunit/phpunit": "3.7.*"
}]]></programlisting>

    <para>
      For a standalone system wide installation via composer a composer.json
      similar to the following can be used from an arbitary directory.
    </para>

    <programlisting><![CDATA[{
    "name": "phpunit",
    "description": "PHPUnit",
    "require": {
        "phpunit/phpunit": "3.7.*"
    },
    "config": {
        "bin-dir": "/usr/local/bin/"
    }
}]]></programlisting>

    <note>
      <para>
        Currently it is still necessary to add a
        <literal>"minimum-stability": "dev"</literal>
        for the installation to work out.
        This requirement will be removed with future PHPUnit releases.
      </para>
    </note>

  </section>

  <section id="installation.optional-packages">
    <title>Optional packages</title>

    <para>
      オプションのパッケージとして、これらが使えます。
    </para>

    <variablelist>
      <varlistentry>
        <term>
          <literal>DbUnit</literal>
        </term>
        <listitem>
          <para>
            DbUnit の PHP/PHPUnit 向けの移植。データベースとのやりとりをテスト可能にする。
          </para>

          <para>
            このパッケージは、PEAR を使って次のコマンドでインストールします。
          </para>

          <screen>
            <userinput>pear install phpunit/DbUnit</userinput>
          </screen>

          <para>
            or via composer by addding the following
            <literal>"require-dev"</literal>
            dependency:
          </para>

          <screen>
            <userinput>"phpunit/dbunit": ">=1.2"</userinput>
          </screen>

        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHP_Invoker</literal>
        </term>
        <listitem>
          <para>
            A utility class for invoking callables with a timeout. This package is
            required to enforce test timeouts in strict mode.
          </para>

          <para>
            This package can be installed using the following command:
          </para>

          <screen>
            <userinput>pear install phpunit/PHP_Invoker</userinput>
          </screen>

          <para>
            or via composer by addding the following
            <literal>"require-dev"</literal>
            dependency:
          </para>

          <screen>
            <userinput>"phpunit/php-invoker": "*"</userinput>
          </screen>

        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHPUnit_Selenium</literal>
        </term>
        <listitem>
          <para>
            PHPUnit 用の Selenium RC インテグレーション。
          </para>

          <para>
            このパッケージは、PEAR を使って次のコマンドでインストールします。
          </para>

          <screen>
            <userinput>pear install phpunit/PHPUnit_Selenium</userinput>
          </screen>

          <para>
            or via composer by addding the following
            <literal>"require-dev"</literal>
            dependency:
          </para>

          <screen>
            <userinput>"phpunit/phpunit-selenium": ">=1.2"</userinput>
          </screen>

        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHPUnit_Story</literal>
        </term>
        <listitem>
          <para>
            PHPUnit で振る舞い駆動開発をするための、ストーリーベースのテストランナー。
          </para>

          <para>
            このパッケージは、PEAR を使って次のコマンドでインストールします。
          </para>

          <screen>
            <userinput>pear install phpunit/PHPUnit_Story</userinput>
          </screen>

          <para>
            or via composer by addding the following
            <literal>"require-dev"</literal>
            dependency:
          </para>

          <screen>
            <userinput>"phpunit/phpunit-story": "*"</userinput>
          </screen>

        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHPUnit_SkeletonGenerator</literal>
        </term>
        <listitem>
          <para>
            プロダクションコードのクラスからテストクラスの雛形を生成したり、
            その逆の操作をしたりするツール。
          </para>

          <para>
            このパッケージは、次のコマンドでインストールします。
          </para>

          <screen>
            <userinput>pear install phpunit/PHPUnit_SkeletonGenerator</userinput>
          </screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHPUnit_TestListener_DBUS</literal>
        </term>
        <listitem>
          <para>
            イベントを DBUS に送信するテストリスナー。
          </para>

          <para>
            このパッケージは、次のコマンドでインストールします。
          </para>

          <screen>
            <userinput>pear install phpunit/PHPUnit_TestListener_DBUS</userinput>
          </screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHPUnit_TestListener_XHProf</literal>
        </term>
        <listitem>
          <para>
            XHProf を使ってテスト対象コードの自動プロファイリングを行うテストリスナー。
          </para>

          <para>
            このパッケージは、次のコマンドでインストールします。
          </para>

          <screen>
            <userinput>pear install phpunit/PHPUnit_TestListener_XHProf</userinput>
          </screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHPUnit_TicketListener_Fogbugz</literal>
        </term>
        <listitem>
          <para>
            Fogbugz issue API 用のチケットリスナー。
          </para>

          <para>
            このパッケージは、次のコマンドでインストールします。
          </para>

          <screen>
            <userinput>pear install phpunit/PHPUnit_TicketListener_Fogbugz</userinput>
          </screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHPUnit_TicketListener_GitHub</literal>
        </term>
        <listitem>
          <para>
            GitHub issue API 用のチケットリスナー。
          </para>

          <para>
            このパッケージは、次のコマンドでインストールします。
          </para>

          <screen>
            <userinput>pear install phpunit/PHPUnit_TicketListener_GitHub</userinput>
          </screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHPUnit_TicketListener_GoogleCode</literal>
        </term>
        <listitem>
          <para>
            Google Code issue API 用のチケットリスナー。
          </para>

          <para>
            このパッケージは、次のコマンドでインストールします。
          </para>

          <screen>
            <userinput>pear install phpunit/PHPUnit_TicketListener_GoogleCode</userinput>
          </screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHPUnit_TicketListener_Trac</literal>
        </term>
        <listitem>
          <para>
            Trac issue API 用のチケットリスナー。
          </para>

          <para>
            このパッケージは、次のコマンドでインストールします。
          </para>

          <screen>
            <userinput>pear install phpunit/PHPUnit_TicketListener_Trac</userinput>
          </screen>
        </listitem>
      </varlistentry>

    </variablelist>

  </section>

  <section id="installing.upgrading">
    <title>Upgrading</title>

    <para>
      This section serves as a collection of minor BC issues that one might
      run into when moving from PHPUnit 3.6 to PHPUnit 3.7.
    </para>

    <para>
      The upgrade should be rather easy and work without any issues as it was
      tested against all major open source frameworks and there was not a
      single problem for them. Still ever project is different and if you
      didn't get around to trying one of the release candidates and have ran
      into an issue this document might provide some help.
    </para>

    <variablelist>

      <varlistentry>
        <term><emphasis role="strong">Removed deprecated OutputTestCase</emphasis></term>
        <listitem>
          <para>
            The class <literal>PHPUnit_Extensions_OutputTestCase</literal> has
            been removed. PHPUnit 3.6 issued a deprecation notice when it was
            used. To see how output can now be tested look into
            <xref linkend="writing-tests-for-phpunit.output" />.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis role="strong">Current working directory will be restored after each test case</emphasis></term>
        <listitem>
          <para>
            If a test changes the current working directory
            (<literal>cwd</literal>) PHPUnit ran into issues when generating
            code coverage output. Now that the cwd is restored after each
            test case you might find that one of your tests depended on
            another test changing the cwd. Something that isn't desirable
            anyways and should be easy to fix.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis role="strong">Test listeners trigger one autoload call</emphasis></term>
        <listitem>
          <para>
            When using custom test listeners as described in
            <xref linkend="appendixes.configuration.test-listeners"/> PHPUnit
            silently ignored missing test listeners and it was quite hard to
            debug that issues for the user. Now one autoload call will be
            triggered trying to locate the class. If your autoloader produces
            an error when it doesn't find a test listener you might run into an
            issue here. Removing the listener or making sure it's loaded in your
            <literal>bootstrap.php</literal> will solve this.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis role="strong">Parameters for mock objects don't get cloned anymore</emphasis></term>
        <listitem>
          <para>
            Previously all object parameters where cloned when mocking.
            This lead to issues when testing trying to check whether the same
            object was passed to method or not and other problem with
            uncloneable objects. As a long standing feature request by many
            this behavior was changed.
            <xref linkend="test-doubles.mock-objects.examples.clone-object-parameters-usecase.php" />
            shows where the new implementation could be useful.
            <xref linkend="test-doubles.mock-objects.examples.enable-clone-object-parameters.php" />
            shows how to switch back to previous behavior.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis role="strong">
          <literal>addUncoveredFilesFromWhitelist</literal>
          was removed in favor of
          <literal>processUncoveredFilesFromWhitelist</literal></emphasis>
        </term>
        <listitem>
          <para>
            When generating code coverage and using
            <literal><![CDATA[<whitelist addUncoveredFilesFromWhitelist="true">]]></literal>
            all uncovered files got included by PHPUnit. This was an issue for
            people with executable code in those files. PHPUnit will now scan
            the file and guess what code is executable and what code is not
            without including it. This might lead to different code coverage
            reports.
          </para>
          <para>
            To switch back to the old behavior the setting
            <literal><![CDATA[<whitelist processUncoveredFilesFromWhitelist=="true">]]></literal>
            can be used. If you want the behavior with PHPUnit 3.6. and 3.7.
            it is possible to use both settings for a while.
          </para>
        </listitem>
      </varlistentry>


    </variablelist>

  </section>

</chapter>
