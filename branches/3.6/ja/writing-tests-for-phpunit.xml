<?xml version="1.0" encoding="utf-8" ?>

<chapter id="writing-tests-for-phpunit">
  <title>PHPUnit 用のテストの書き方</title>

  <para>
    <indexterm><primary>PHPUnit_Framework_TestCase</primary></indexterm>

    <xref linkend="writing-tests-for-phpunit.examples.StackTest.php" /> で、
    PHP の配列操作のテストを PHPUnit 用に書く方法を示します。
    この例では、PHPUnit を使ったテストを書く際の基本的な決まり事や手順を紹介します。
  </para>

  <orderedlist>
    <listitem><para><literal>Class</literal> という名前のクラスのテストは、<literal>ClassTest</literal> という名前のクラスに記述します。</para></listitem>
    <listitem><para><literal>ClassTest</literal> は、(ほとんどの場合) <literal>PHPUnit_Framework_TestCase</literal> を継承します。</para></listitem>
    <listitem><indexterm><primary>Annotation</primary></indexterm><indexterm><primary>@test</primary></indexterm><para>テストは、<literal>test*</literal> という名前のパブリックメソッドとなります。</para><para><indexterm><primary>Annotation</primary></indexterm>あるいは、<literal>@test</literal> アノテーションをメソッドのコメント部で使用することで、それがテストメソッドであることを示すこともできます。</para></listitem>
    <listitem><para>テストメソッドの中で <literal>assertEquals()</literal> のようなアサーションメソッド (<xref linkend="writing-tests-for-phpunit.assertions" /> を参照ください) を使用して、期待される値と実際の値が等しいことを確かめます。</para></listitem>
  </orderedlist>

  <example id="writing-tests-for-phpunit.examples.StackTest.php">
    <title>PHPUnit での配列操作のテスト</title>
    <programlisting><![CDATA[<?php
class StackTest extends PHPUnit_Framework_TestCase
{
    public function testPushAndPop()
    {
        $stack = array();
        $this->assertEquals(0, count($stack));

        array_push($stack, 'foo');
        $this->assertEquals('foo', $stack[count($stack)-1]);
        $this->assertEquals(1, count($stack));

        $this->assertEquals('foo', array_pop($stack));
        $this->assertEquals(0, count($stack));
    }
}
?>]]></programlisting>
  </example>

  <blockquote>
    <attribution>Martin Fowler</attribution>
    <para>
      Whenever you are tempted to type something into a
      <literal>print</literal> statement or a debugger expression, write it
      as a test instead.
    </para>
    <para>
      何かを <literal>print</literal> 文やデバッガの式に書きたくなったときは、
      代わりにその内容をテストに書くようにするんだ。
    </para>
  </blockquote>

  <section id="writing-tests-for-phpunit.test-dependencies">
    <title>テストの依存性</title>

    <blockquote>
      <attribution>Adrian Kuhn et. al.</attribution>
      <para>
        Unit Tests are primarily written as a good practice to help developers
        identify and fix bugs, to refactor code and to serve as documentation
        for a unit of software under test. To achieve these benefits, unit tests
        ideally should cover all the possible paths in a program. One unit test
        usually covers one specific path in one function or method. However a
        test method is not necessary an encapsulated, independent entity. Often
        there are implicit dependencies between test methods, hidden in the
        implementation scenario of a test.
      </para>
      <para>
        ユニットテストを書くそもそもの目的は、バグを発見と修正や
        コードのリファクタリングを開発者がやりやすくすること。
        そしてテスト対象のソフトウェアのドキュメントとしての役割を果たすことだ。
        これらの目的を達成するためには、
        ユニットテストがプログラム内のすべてのルートをカバーしていることが理想である。
        ひとつのユニットテストがカバーするのは、
        通常はひとつの関数やメソッド内の特定のルートだけとなる。
        しかし、テストメソッドは必ずしもカプセル化して独立させる必要はない。
        複数のテストメソッドの間に暗黙の依存性があって、
        隠された実装シナリオがテストの中にあるのもよくあることだ。
      </para>
    </blockquote>

    <para>
      <indexterm><primary>Test Dependencies</primary></indexterm>

      PHPUnit は、テストメソッド間の依存性の明示的な宣言をサポートしています。
      この依存性とは、テストメソッドが実行される順序を定義するものではありません。
      プロデューサーがテストフィクスチャを作ってそのインスタンスを返し、
      依存するコンシューマーがそれを受け取って利用するというものです。
    </para>

    <itemizedlist>
      <listitem><para>プロデューサーとは、返り値としてテスト対象のユニットを生成するテストメソッドのこと。</para></listitem>
      <listitem><para>コンシューマーとは、プロデューサーの返り値に依存するテストメソッドのこと。</para></listitem>
    </itemizedlist>

    <para>
      <indexterm><primary>Annotation</primary></indexterm>
      <indexterm><primary>@depends</primary></indexterm>

      <xref linkend="writing-tests-for-phpunit.examples.StackTest2.php"/>
      は、<literal>@depends</literal> アノテーションを使ってテストメソッドの依存性をあらわす例です。
    </para>

    <example id="writing-tests-for-phpunit.examples.StackTest2.php">
      <title><literal>@depends</literal> アノテーションを使った依存性の表現</title>
      <programlisting><![CDATA[<?php
class StackTest extends PHPUnit_Framework_TestCase
{
    public function testEmpty()
    {
        $stack = array();
        $this->assertEmpty($stack);

        return $stack;
    }

    /**
     * @depends testEmpty
     */
    public function testPush(array $stack)
    {
        array_push($stack, 'foo');
        $this->assertEquals('foo', $stack[count($stack)-1]);
        $this->assertNotEmpty($stack);

        return $stack;
    }

    /**
     * @depends testPush
     */
    public function testPop(array $stack)
    {
        $this->assertEquals('foo', array_pop($stack));
        $this->assertEmpty($stack);
    }
}
?>]]></programlisting>
    </example>

    <para>
      上の例では、まず最初のテスト <literal>testEmpty()</literal>
      で新しい配列を作り、それが空であることを確かめます。
      このテストは、フィクスチャを返します。
      二番目のテスト <literal>testPush()</literal> は
      <literal>testEmpty()</literal> に依存しており、
      依存するテストの結果を引数として受け取ります。
      最後の <literal>testPop()</literal> は
      <literal>testPush()</literal> に依存しています。
    </para>

    <para>
      <indexterm><primary>Defect Localization</primary></indexterm>

      問題の局所化を手早く行うには、失敗したテストに目を向けやすくしたいものです。
      そのため PHPUnit では、
      あるテストが失敗したときにはそのテストに依存する他のテストの実行をスキップします。
      テスト間の依存性を活用して問題点を見つけやすくしている例を
      <xref linkend="writing-tests-for-phpunit.examples.DependencyFailureTest.php"/>
      に示します。
    </para>

    <example id="writing-tests-for-phpunit.examples.DependencyFailureTest.php">
      <title>テストの依存性の活用</title>
      <programlisting><![CDATA[<?php
class DependencyFailureTest extends PHPUnit_Framework_TestCase
{
    public function testOne()
    {
        $this->assertTrue(FALSE);
    }

    /**
     * @depends testOne
     */
    public function testTwo()
    {
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit --verbose DependencyFailureTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

DependencyFailureTest
FS

Time: 0 seconds

There was 1 failure:

1) testOne(DependencyFailureTest)
Failed asserting that <boolean:false> is true.
/home/sb/DependencyFailureTest.php:6

There was 1 skipped test:

1) testTwo(DependencyFailureTest)
This test depends on "DependencyFailureTest::testOne" to pass.

FAILURES!
Tests: 2, Assertions: 1, Failures: 1, Skipped: 1.]]></screen>
    </example>

    <para>
      ひとつのテストに複数の <literal>@depends</literal> アノテーションをつけることもできます。
      PHPUnit はテストが実行される順序を変更しないので、
      テストが実行されるときに確実に依存性が満たされているようにしておく必要があります。
    </para>
  </section>

  <section id="writing-tests-for-phpunit.data-providers">
    <title>データプロバイダ</title>

    <para>
      <indexterm><primary>Annotation</primary></indexterm>
      <indexterm><primary>@dataProvider</primary></indexterm>
      テストメソッドには任意の引数を渡すことができます。
      この引数は、データプロバイダメソッド
      (<xref linkend="writing-tests-for-phpunit.data-providers.examples.DataTest.php" />
      の <literal>provider()</literal>)
      で指定します。使用するデータプロバイダメソッドを指定するには
      <literal>@dataProvider</literal> アノテーションを使用します。
    </para>

    <para>
      データプロバイダメソッドは、<literal>public</literal>
      でなければなりません。また、
      メソッドの返り値の型は、配列の配列あるいはオブジェクト
      (<literal>Iterator</literal> インターフェイスを実装しており、
      反復処理の際に配列を返すもの) である必要があります。
      この返り値の各要素に対して、その配列の中身を引数としてテストメソッドがコールされます。
    </para>

    <example id="writing-tests-for-phpunit.data-providers.examples.DataTest.php">
      <title>データプロバイダの使用</title>
      <programlisting><![CDATA[<?php
class DataTest extends PHPUnit_Framework_TestCase
{
    /**
     * @dataProvider provider
     */
    public function testAdd($a, $b, $c)
    {
        $this->assertEquals($c, $a + $b);
    }

    public function provider()
    {
        return array(
          array(0, 0, 0),
          array(0, 1, 1),
          array(1, 0, 1),
          array(1, 1, 3)
        );
    }
}
?>]]></programlisting>

    <screen><userinput>phpunit DataTest</userinput>
<![CDATA[PHPUnit 3.6.0 by Sebastian Bergmann.

...F

Time: 0 seconds

There was 1 failure:

1) testAdd(DataTest) with data (1, 1, 3)
Failed asserting that <integer:2> matches expected value <integer:3>.
/home/sb/DataTest.php:21

FAILURES!
Tests: 4, Assertions: 4, Failures: 1.
]]></screen>
    </example>

    <note>
      <para>
        <indexterm><primary>Annotation</primary></indexterm>
        <indexterm><primary>@dataProvider</primary></indexterm>
        <indexterm><primary>@depends</primary></indexterm>

        <literal>@dataProvider</literal> で指定したメソッドと
        <literal>@depends</literal> で指定したテストの両方からの入力を受け取るテストの場合、
        データプロバイダからの引数のほうが依存するテストからの引数より先にきます。
      </para>
    </note>

    <note>
      <para>
        <indexterm><primary>Annotation</primary></indexterm>
        <indexterm><primary>@dataProvider</primary></indexterm>
        <indexterm><primary>@depends</primary></indexterm>

        あるテストがデータプロバイダを使う別のテストに依存している場合、
        別のテストで少なくともひとつのデータセットに対するテストが成功すれば
        そのテストも実行されます。
        データプロバイダを使ったテストの結果をそのテストに注入することはできません。
      </para>
    </note>
  </section>

  <section id="writing-tests-for-phpunit.exceptions">
    <title>例外のテスト</title>

    <para>
      <indexterm><primary>Annotation</primary></indexterm>
      <indexterm><primary>@expectedException</primary></indexterm>

      <xref linkend="writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php" />
      は、テストするコード内で例外がスローされたかどうかを
      <literal>@expectedException</literal> アノテーションを使用して調べる方法を示すものです。
    </para>

    <example id="writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php">
      <title>@expectedException アノテーションの使用法</title>
      <programlisting><![CDATA[<?php
class ExceptionTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException InvalidArgumentException
     */
    public function testException()
    {
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ExceptionTest</userinput>
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) testException(ExceptionTest)
Expected exception InvalidArgumentException

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
    </example>

    <para>
      一方、<literal>setExpectedException()</literal>
      メソッドを使用して、発生するであろう例外を指定することもできます。この方法を
      <xref linkend="writing-tests-for-phpunit.exceptions.examples.ExceptionTest2.php"/>
      に示します。
    </para>

    <example id="writing-tests-for-phpunit.exceptions.examples.ExceptionTest2.php">
      <title>テスト対象のコードで発生するであろう例外の指定</title>
      <programlisting><![CDATA[<?php
class ExceptionTest extends PHPUnit_Framework_TestCase
{
    public function testException()
    {
        $this->setExpectedException('InvalidArgumentException');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ExceptionTest</userinput>
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) testException(ExceptionTest)
Expected exception InvalidArgumentException

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
    </example>

    <para>
      <xref linkend="writing-tests-for-phpunit.exceptions.tables.api" />
      は、例外をテストするために用意されているメソッドをまとめたものです。
    </para>

    <table id="writing-tests-for-phpunit.exceptions.tables.api">
      <title>例外のテスト用のメソッド</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>メソッド</entry>
            <entry>意味</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void setExpectedException(string $exceptionName)</literal></entry>
            <entry>発生することを期待する例外の名前を <literal>$exceptionName</literal> に設定します。</entry>
          </row>
          <row>
            <entry><literal>String getExpectedException()</literal></entry>
            <entry>発生することを期待する例外の名前を返します。</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      一方、
      <xref linkend="writing-tests-for-phpunit.exceptions.examples.ExceptionTest3.php" />
      のような方法で例外をテストすることもできます。
    </para>

    <example id="writing-tests-for-phpunit.exceptions.examples.ExceptionTest3.php">
      <title>例外をテストするための、別の方法</title>
      <programlisting><![CDATA[<?php
class ExceptionTest extends PHPUnit_Framework_TestCase {
    public function testException() {
        try {
            // ... 例外が発生するであろうコード ...
        }

        catch (InvalidArgumentException $expected) {
            return;
        }

        $this->fail('期待通りの例外が発生しませんでした。');
    }
}
?>]]></programlisting>
    </example>

    <para>
      例外が発生するはずの
      <xref linkend="writing-tests-for-phpunit.exceptions.examples.ExceptionTest3.php" />
      のコードで例外が発生しなかった場合、それに続く
      <literal>fail()</literal>
      によってテストが終了し、問題を報告します。期待通りに例外が発生すると、
      <literal>catch</literal> ブロックが実行されてテストは正常終了します。
    </para>
  </section>

  <section id="writing-tests-for-phpunit.errors">
    <title>PHP のエラーのテスト</title>
    <para>
      <indexterm><primary>Error Handler</primary></indexterm>
      <indexterm><primary>PHP Error</primary></indexterm>
      <indexterm><primary>PHP Notice</primary></indexterm>
      <indexterm><primary>PHP Warning</primary></indexterm>
      <indexterm><primary>PHPUnit_Framework_Error</primary></indexterm>

      デフォルトでは、PHPUnit はテストの実行中に発生した PHP のエラーや警告そして notice
      を例外に変換します。これらの例外を用いて、たとえば
      <xref linkend="writing-tests-for-phpunit.exceptions.examples.ErrorTest.php"/>
      のように PHP のエラーが発生することをテストできます。
    </para>

    <example id="writing-tests-for-phpunit.exceptions.examples.ErrorTest.php">
      <title>@expectedException を用いた、PHP エラーが発生することのテスト</title>
      <programlisting><![CDATA[<?php
class ExpectedErrorTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException PHPUnit_Framework_Error
     */
    public function testFailingInclude()
    {
        include 'not_existing_file.php';
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ExpectedErrorTest</userinput>
PHPUnit 3.6.0 by Sebastian Bergmann.

.

Time: 0 seconds

OK (1 test, 1 assertion)</screen>
    </example>

    <para>
      <indexterm><primary>PHPUnit_Framework_Error_Notice</primary></indexterm>
      <indexterm><primary>PHPUnit_Framework_Error_Warning</primary></indexterm>

      <literal>PHPUnit_Framework_Error_Notice</literal> および
      <literal>PHPUnit_Framework_Error_Warning</literal> は、
      それぞれ PHP の notice と警告に対応します。
    </para>
  </section>

  <section id="writing-tests-for-phpunit.assertions">
    <title>Assertions</title>

    <para>
      This section lists the various assertion methods that are available.
    </para>

    <section id="writing-tests-for-phpunit.assertions.assertArrayHasKey">
      <title><literal>assertArrayHasKey()</literal></title>
      <indexterm><primary>assertArrayHasKey()</primary></indexterm>
      <indexterm><primary>assertArrayNotHasKey()</primary></indexterm>
      <para><literal>assertArrayHasKey(mixed $key, array $array[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if <literal>$array</literal> does not have the <literal>$key</literal>.</para>
      <para><literal>assertArrayNotHasKey()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <example id="writing-tests-for-phpunit.assertions.assertArrayHasKey.example">
        <title>Usage of assertArrayHasKey()</title>
        <programlisting><![CDATA[<?php
class ArrayHasKeyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertArrayHasKey('foo', array('bar' => 'baz'));
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ArrayHasKeyTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) ArrayHasKeyTest::testFailure
Failed asserting that an array has the key <string:foo>.
/home/sb/ArrayHasKeyTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertClassHasAttribute">
      <title><literal>assertClassHasAttribute()</literal></title>
      <indexterm><primary>assertClassHasAttribute()</primary></indexterm>
      <indexterm><primary>assertClassNotHasAttribute()</primary></indexterm>
      <para><literal>assertClassHasAttribute(string $attributeName, string $className[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if <literal>$className::attributeName</literal> does not exist.</para>
      <para><literal>assertClassNotHasAttribute()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <example id="writing-tests-for-phpunit.assertions.assertClassHasAttribute.example">
        <title>Usage of assertClassHasAttribute()</title>
        <programlisting><![CDATA[<?php
class ClassHasAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertClassHasAttribute('foo', 'stdClass');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ClassHasAttributeTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) ClassHasAttributeTest::testFailure
Failed asserting that class "stdClass" has attribute "foo".
/home/sb/ClassHasAttributeTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertClassHasStaticAttribute">
      <title><literal>assertClassHasStaticAttribute()</literal></title>
      <indexterm><primary>assertClassHasStaticAttribute()</primary></indexterm>
      <indexterm><primary>assertClassNotHasStaticAttribute()</primary></indexterm>
      <para><literal>assertClassHasStaticAttribute(string $attributeName, string $className[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if <literal>$className::attributeName</literal> does not exist.</para>
      <para><literal>assertClassNotHasStaticAttribute()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <example id="writing-tests-for-phpunit.assertions.assertClassHasStaticAttribute.example">
        <title>Usage of assertClassHasStaticAttribute()</title>
        <programlisting><![CDATA[<?php
class ClassHasStaticAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertClassHasStaticAttribute('foo', 'stdClass');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ClassHasStaticAttributeTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) ClassHasStaticAttributeTest::testFailure
Failed asserting that class "stdClass" has static attribute "foo".
/home/sb/ClassHasStaticAttributeTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertContains">
      <title><literal>assertContains()</literal></title>
      <indexterm><primary>assertContains()</primary></indexterm>
      <indexterm><primary>assertNotContains()</primary></indexterm>
      <indexterm><primary>assertAttributeContains()</primary></indexterm>
      <indexterm><primary>assertAttributeNotContains()</primary></indexterm>
      <para><literal>assertContains(mixed $needle, Iterator|array $haystack[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if <literal>$needle</literal> is not an element of <literal>$haystack</literal>.</para>
      <para><literal>assertNotContains()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <para><literal>assertAttributeContains()</literal> and <literal>assertAttributeNotContains()</literal> are convenience wrappers that use a <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal> attribute of a class or object as the haystack.</para>
      <example id="writing-tests-for-phpunit.assertions.assertContains.example">
        <title>Usage of assertContains()</title>
        <programlisting><![CDATA[<?php
class ContainsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertContains(4, array(1, 2, 3));
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ContainsTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) ContainsTest::testFailure
Failed asserting that an array contains <integer:4>.
/home/sb/ContainsTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>

      <para><literal>assertContains(string $needle, string $haystack[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if <literal>$needle</literal> is not a substring of <literal>$haystack</literal>.</para>
      <example id="writing-tests-for-phpunit.assertions.assertContains.example2">
        <title>Usage of assertContains()</title>
        <programlisting><![CDATA[<?php
class ContainsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertContains('baz', 'foobar');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ContainsTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) ContainsTest::testFailure
Failed asserting that <string:foobar> contains "baz".
/home/sb/ContainsTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertContainsOnly">
      <title><literal>assertContainsOnly()</literal></title>
      <indexterm><primary>assertContainsOnly()</primary></indexterm>
      <indexterm><primary>assertNotContainsOnly()</primary></indexterm>
      <indexterm><primary>assertAttributeContainsOnly()</primary></indexterm>
      <indexterm><primary>assertAttributeNotContainsOnly()</primary></indexterm>
      <para><literal>assertContainsOnly(string $type, Iterator|array $haystack[, boolean $isNativeType = NULL, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if <literal>$haystack</literal> does not contain only variables of type <literal>$type</literal>.</para>
      <para><literal>$isNativeType</literal> is a flag used to indicate whether <literal>$type</literal> is a native PHP type or not.</para>
      <para><literal>assertNotContainsOnly()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <para><literal>assertAttributeContainsOnly()</literal> and <literal>assertAttributeNotContainsOnly()</literal> are convenience wrappers that use a <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal> attribute of a class or object as the actual value.</para>
      <example id="writing-tests-for-phpunit.assertions.assertContainsOnly.example">
        <title>Usage of assertContainsOnly()</title>
        <programlisting><![CDATA[<?php
class ContainsOnlyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertContainsOnly('string', array('1', '2', 3));
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ContainsOnlyTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) ContainsOnlyTest::testFailure
Failed asserting that
Array
(
    [0] => 1
    [1] => 2
    [2] => 3
)
 contains only values of type "string".
/home/sb/ContainsOnlyTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertCount">
      <title><literal>assertCount()</literal></title>
      <indexterm><primary>assertCount()</primary></indexterm>
      <indexterm><primary>assertNotCount()</primary></indexterm>
      <para><literal>assertCount($expectedCount, $haystack[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if the number of elements in <literal>$haystack</literal> is not <literal>$expectedCount</literal>.</para>
      <para><literal>assertNotCount()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <example id="writing-tests-for-phpunit.assertions.assertCount.example">
        <title>Usage of assertCount()</title>
        <programlisting><![CDATA[<?php
class CountTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertCount(0, array('foo'));
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit CountTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) CountTest::testFailure
Count of 1 does not match expected count of 0.

/home/sb/CountTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertEmpty">
      <title><literal>assertEmpty()</literal></title>
      <indexterm><primary>assertEmpty()</primary></indexterm>
      <indexterm><primary>assertNotEmpty()</primary></indexterm>
      <indexterm><primary>assertAttributeEmpty()</primary></indexterm>
      <indexterm><primary>assertAttributeNotEmpty()</primary></indexterm>
      <para><literal>assertEmpty(mixed $actual[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if <literal>$actual</literal> is not empty.</para>
      <para><literal>assertNotEmpty()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <para><literal>assertAttributeEmpty()</literal> and <literal>assertAttributeNotEmpty()</literal> are convenience wrappers that can be applied to a <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal> attribute of a class or object.</para>
      <example id="writing-tests-for-phpunit.assertions.assertEmpty.example">
        <title>Usage of assertEmpty()</title>
        <programlisting><![CDATA[<?php
class EmptyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertEmpty(array('foo'));
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit EmptyTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) EmptyTest::testFailure
Failed asserting that
Array
(
    [0] => foo
)
 is empty.

/home/sb/EmptyTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertEqualXMLStructure">
      <title><literal>assertEqualXMLStructure()</literal></title>
      <indexterm><primary>assertEqualXMLStructure()</primary></indexterm>
      <para><literal>assertEqualXMLStructure(DOMNode $expectedNode, DOMNode $actualNode[, boolean $checkAttributes = FALSE, string $message = ''])</literal></para>
      <para>XXX</para>
      <example id="writing-tests-for-phpunit.assertions.assertEqualXMLStructure.example">
        <title>Usage of assertEqualXMLStructure()</title>
        <programlisting><![CDATA[<?php
?>]]></programlisting>
        <screen><userinput>phpunit EqualXMLStructureTest</userinput><![CDATA[
]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertEquals">
      <title><literal>assertEquals()</literal></title>
      <indexterm><primary>assertEquals()</primary></indexterm>
      <indexterm><primary>assertNotEquals()</primary></indexterm>
      <indexterm><primary>assertAttributeEquals()</primary></indexterm>
      <indexterm><primary>assertAttributeNotEquals()</primary></indexterm>
      <para><literal>assertEquals(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if the two variables <literal>$expected</literal> and <literal>$actual</literal> are not equal.</para>
      <para><literal>assertNotEquals()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <para><literal>assertAttributeEquals()</literal> and <literal>assertAttributeNotEquals()</literal> are convenience wrappers that use a <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal> attribute of a class or object as the actual value.</para>
      <example id="writing-tests-for-phpunit.assertions.assertEquals.example">
        <title>Usage of assertEquals()</title>
        <programlisting><![CDATA[<?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertEquals(1, 0);
    }

    public function testFailure2()
    {
        $this->assertEquals('bar', 'baz');
    }

    public function testFailure3()
    {
        $this->assertEquals("foo\nbar\nbaz\n", "foo\nbah\nbaz\n");
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit EqualsTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

FFF

Time: 0 seconds

There were 3 failures:

1) EqualsTest::testFailure
Failed asserting that <integer:0> matches expected value <integer:1>.
/home/sb/EqualsTest.php:11

2) EqualsTest::testFailure2
Failed asserting that two strings are equal.
expected string <bar>
difference      <  x>
got string      <baz>
/home/sb/EqualsTest.php:16

3) EqualsTest::testFailure3
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ -1,3 +1,3 @@
 foo
-bar
+bah
 baz

/home/sb/EqualsTest.php:21

FAILURES!
Tests: 3, Assertions: 3, Failures: 3.]]></screen>
      </example>

      <para>More specialized comparisons are used for specific argument types for <literal>$expected</literal> and <literal>$actual</literal>, see below.</para>

      <para><literal>assertEquals(float $expected, float $actual[, string $message = '', float $delta = 0])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if the two floats <literal>$expected</literal> and <literal>$actual</literal> are not within <literal>$delta</literal> of each other.</para>
      <para>Please read about <ulink url="http://en.wikipedia.org/wiki/IEEE_754#Comparing_floating-point_numbers">comparing floating-point numbers</ulink> to understand why <literal>$delta</literal> is neccessary.</para>
      <example id="writing-tests-for-phpunit.assertions.assertEquals.example2">
        <title>Usage of assertEquals() with floats</title>
        <programlisting><![CDATA[<?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testSuccess()
    {
        $this->assertEquals(1.0, 1.1, '', 0.2);
    }

    public function testFailure()
    {
        $this->assertEquals(1.0, 1.1);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit EqualsTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

.F

Time: 0 seconds

There was 1 failure:

1) EqualsTest::testFailure
Failed asserting that <double:1.1> matches expected value <double:1>.
/home/sb/EqualsTest.php:11

FAILURES!
Tests: 2, Assertions: 2, Failures: 1.]]></screen>
      </example>

      <para><literal>assertEquals(DOMDocument $expected, DOMDocument $actual[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if the uncommented canonical form of the XML documents represented by the two DOMDocument objects <literal>$expected</literal> and <literal>$actual</literal> are not equal.</para>
      <example id="writing-tests-for-phpunit.assertions.assertEquals.example3">
        <title>Usage of assertEquals() with DOMDocument objects</title>
        <programlisting><![CDATA[<?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $expected = new DOMDocument;
        $expected->loadXML('<foo><bar/></foo>');

        $actual = new DOMDocument;
        $actual->loadXML('<bar><foo/></bar>');

        $this->assertEquals($expected, $actual);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit EqualsTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) EqualsTest::testFailure
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ -1,4 +1,4 @@
 <?xml version="1.0"?>
-<foo>
-  <bar/>
-</foo>
+<bar>
+  <foo/>
+</bar>

/home/sb/EqualsTest.php:12

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>

      <para><literal>assertEquals(object $expected, object $actual[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if the two objects <literal>$expected</literal> and <literal>$actual</literal> do not have equal attribute values.</para>
      <example id="writing-tests-for-phpunit.assertions.assertEquals.example4">
        <title>Usage of assertEquals() with objects</title>
        <programlisting><![CDATA[<?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $expected = new stdClass;
        $expected->foo = 'foo';
        $expected->bar = 'bar';

        $actual = new stdClass;
        $actual->foo = 'bar';
        $actual->baz = 'bar';

        $this->assertEquals($expected, $actual);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit EqualsTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) EqualsTest::testFailure
Failed asserting that two objects are equal.
--- Expected
+++ Actual
@@ -1,5 +1,5 @@
 stdClass Object
 (
-    [foo] => foo
-    [bar] => bar
+    [foo] => bar
+    [baz] => bar
 )

/home/sb/EqualsTest.php:14

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>

      <para><literal>assertEquals(array $expected, array $actual[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if the two arrays <literal>$expected</literal> and <literal>$actual</literal> are not equal.</para>

      <example id="writing-tests-for-phpunit.assertions.assertEquals.example5">
        <title>Usage of assertEquals() with arrays</title>
        <programlisting><![CDATA[<?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertEquals(array('a', 'b', 'c'), array('a', 'c', 'd'));
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit EqualsTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) EqualsTest::testFailure
Failed asserting that two arrays are equal.
--- Expected
+++ Actual
@@ -1,6 +1,6 @@
 Array
 (
     [0] => a
-    [1] => b
-    [2] => c
+    [1] => c
+    [2] => d
 )

/home/sb/EqualsTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertFalse">
      <title><literal>assertFalse()</literal></title>
      <indexterm><primary>assertFalse()</primary></indexterm>
      <para><literal>assertFalse(bool $condition[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if <literal>$condition</literal> is <literal>TRUE</literal>.</para>
      <example id="writing-tests-for-phpunit.assertions.assertFalse.example">
        <title>Usage of assertFalse()</title>
        <programlisting><![CDATA[<?php
class FalseTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertFalse(TRUE);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit FalseTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) FalseTest::testFailure
Failed asserting that <boolean:true> is false.
/home/sb/FalseTest.php:11

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertFileEquals">
      <title><literal>assertFileEquals()</literal></title>
      <indexterm><primary>assertFileEquals()</primary></indexterm>
      <indexterm><primary>assertFileNotEquals()</primary></indexterm>
      <para><literal>assertFileEquals(string $expected, string $actual[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal>  if the file specified by <literal>$expected</literal> does not have the same contents as the file specified by <literal>$actual</literal>.</para>
      <para><literal>assertFileNotEquals()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <example id="writing-tests-for-phpunit.assertions.assertFileEquals.example">
        <title>Usage of assertFileEquals()</title>
        <programlisting><![CDATA[<?php
class FileEqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertFileEquals('/home/sb/expected', '/home/sb/actual');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit FileEqualsTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) FileEqualsTest::testFailure
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ -1,2 +1,2 @@
-expected
+actual


/home/sb/FileEqualsTest.php:6

FAILURES!
Tests: 1, Assertions: 3, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertFileExists">
      <title><literal>assertFileExists()</literal></title>
      <indexterm><primary>assertFileExists()</primary></indexterm>
      <indexterm><primary>assertFileNotExists()</primary></indexterm>
      <para><literal>assertFileExists(string $filename[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if the file specified by <literal>$filename</literal> does not exist.</para>
      <para><literal>assertFileNotExists()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <example id="writing-tests-for-phpunit.assertions.assertFileExists.example">
        <title>Usage of assertFileExists()</title>
        <programlisting><![CDATA[<?php
class FileExistsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertFileExists('/path/to/file');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit FileExistsTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) FileExistsTest::testFailure
Failed asserting that file "/path/to/file" exists.
/home/sb/FileExistsTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertGreaterThan">
      <title><literal>assertGreaterThan()</literal></title>
      <indexterm><primary>assertGreaterThan()</primary></indexterm>
      <indexterm><primary>assertAttributeGreaterThan()</primary></indexterm>
      <para><literal>assertGreaterThan(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if the value of <literal>$actual</literal> is not greater than the value of <literal>$expected</literal>.</para>
      <para><literal>assertAttributeGreaterThan()</literal> is a convenience wrapper that uses a <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal> attribute of a class or object as the actual value.</para>
      <example id="writing-tests-for-phpunit.assertions.assertGreaterThan.example">
        <title>Usage of assertGreaterThan()</title>
        <programlisting><![CDATA[<?php
class GreaterThanTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertGreaterThan(2, 1);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit GreaterThanTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) GreaterThanTest::testFailure
Failed asserting that <integer:1> is greater than <integer:2>.
/home/sb/GreaterThanTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertGreaterThanOrEqual">
      <title><literal>assertGreaterThanOrEqual()</literal></title>
      <indexterm><primary>assertGreaterThanOrEqual()</primary></indexterm>
      <indexterm><primary>assertAttributeGreaterThanOrEqual()</primary></indexterm>
      <para><literal>assertGreaterThanOrEqual(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if the value of <literal>$actual</literal> is not greater than or equal to the value of <literal>$expected</literal>.</para>
      <para><literal>assertAttributeGreaterThanOrEqual()</literal> is a convenience wrapper that uses a <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal> attribute of a class or object as the actual value.</para>
      <example id="writing-tests-for-phpunit.assertions.assertGreaterThanOrEqual.example">
        <title>Usage of assertGreaterThanOrEqual()</title>
        <programlisting><![CDATA[<?php
class GreatThanOrEqualTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertGreaterThanOrEqual(2, 1);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit GreaterThanOrEqualTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) GreatThanOrEqualTest::testFailure
Failed asserting that <integer:1> is equal to <integer:2> or is greater than <integer:2>.
/home/sb/GreaterThanOrEqualTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertInstanceOf">
      <title><literal>assertInstanceOf()</literal></title>
      <indexterm><primary>assertInstanceOf()</primary></indexterm>
      <indexterm><primary>assertNotInstanceOf()</primary></indexterm>
      <indexterm><primary>assertAttributeInstanceOf()</primary></indexterm>
      <indexterm><primary>assertAttributeNotInstanceOf()</primary></indexterm>
      <para><literal>assertInstanceOf($expected, $actual[, $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if <literal>$actual</literal> is not an instance of <literal>$expected</literal>.</para>
      <para><literal>assertNotInstanceOf()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <para><literal>assertAttributeInstanceOf()</literal> and <literal>assertAttributeNotInstanceOf()</literal> are convenience wrappers that can be applied to a <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal> attribute of a class or object.</para>
      <example id="writing-tests-for-phpunit.assertions.assertInstanceOf.example">
        <title>Usage of assertInstanceOf()</title>
        <programlisting><![CDATA[<?php
class InstanceOfTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertInstanceOf('RuntimeException', new Exception);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit InstanceOfTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) InstanceOfTest::testFailure
Failed asserting that <Exception> is an instance of class "RuntimeException".
/home/sb/InstanceOfTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertInternalType">
      <title><literal>assertInternalType()</literal></title>
      <indexterm><primary>assertInternalType()</primary></indexterm>
      <indexterm><primary>assertNotInternalType()</primary></indexterm>
      <indexterm><primary>assertAttributeInternalType()</primary></indexterm>
      <indexterm><primary>assertAttributeNotInternalType()</primary></indexterm>
      <para><literal>assertInternalType($expected, $actual[, $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if <literal>$actual</literal> is not of the <literal>$expected</literal> type.</para>
      <para><literal>assertNotInternalType()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <para><literal>assertAttributeInternalType()</literal> and <literal>assertAttributeNotInternalType()</literal> are convenience wrappers that can be applied to a <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal> attribute of a class or object.</para>
      <example id="writing-tests-for-phpunit.assertions.assertInternalType.example">
        <title>Usage of assertInternalType()</title>
        <programlisting><![CDATA[<?php
class InternalTypeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertInternalType('string', 42);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit InternalTypeTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) InternalTypeTest::testFailure
Failed asserting that <integer:42> is of type "string".
/home/sb/InstanceOfTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertLessThan">
      <title><literal>assertLessThan()</literal></title>
      <indexterm><primary>assertLessThan()</primary></indexterm>
      <indexterm><primary>assertAttributeLessThan()</primary></indexterm>
      <para><literal>assertLessThan(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if the value of <literal>$actual</literal> is not less than the value of <literal>$expected</literal>.</para>
      <para><literal>assertAttributeLessThan()</literal> is a convenience wrapper that uses a <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal> attribute of a class or object as the actual value.</para>
      <example id="writing-tests-for-phpunit.assertions.assertLessThan.example">
        <title>Usage of assertLessThan()</title>
        <programlisting><![CDATA[<?php
class LessThanTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertLessThan(1, 2);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit LessThanTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) LessThanTest::testFailure
Failed asserting that <integer:2> is less than <integer:1>.
/home/sb/LessThanTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertLessThanOrEqual">
      <title><literal>assertLessThanOrEqual()</literal></title>
      <indexterm><primary>assertLessThanOrEqual()</primary></indexterm>
      <indexterm><primary>assertAttributeLessThanOrEqual()</primary></indexterm>
      <para><literal>assertLessThanOrEqual(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if the value of <literal>$actual</literal> is not less than or equal to the value of <literal>$expected</literal>.</para>
      <para><literal>assertAttributeLessThanOrEqual()</literal> is a convenience wrapper that uses a <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal> attribute of a class or object as the actual value.</para>
      <example id="writing-tests-for-phpunit.assertions.assertLessThanOrEqual.example">
        <title>Usage of assertLessThanOrEqual()</title>
        <programlisting><![CDATA[<?php
class LessThanOrEqualTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertLessThanOrEqual(1, 2);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit LessThanOrEqualTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) LessThanOrEqualTest::testFailure
Failed asserting that <integer:2> is equal to <integer:1> or is less than <integer:1>.
/home/sb/LessThanOrEqualTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertNull">
      <title><literal>assertNull()</literal></title>
      <indexterm><primary>assertNull()</primary></indexterm>
      <indexterm><primary>assertNotNull()</primary></indexterm>
      <para><literal>assertNull(mixed $variable[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if <literal>$variable</literal> is not <literal>NULL</literal>.</para>
      <para><literal>assertNotNull()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <example id="writing-tests-for-phpunit.assertions.assertNull.example">
        <title>Usage of assertNull()</title>
        <programlisting><![CDATA[<?php
class NullTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertNull('foo');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit NotNullTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) NullTest::testFailure
Failed asserting that <string:foo> is null.
/home/sb/NullTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertObjectHasAttribute">
      <title><literal>assertObjectHasAttribute()</literal></title>
      <indexterm><primary>assertObjectHasAttribute()</primary></indexterm>
      <indexterm><primary>assertObjectNotHasAttribute()</primary></indexterm>
      <para><literal>assertObjectHasAttribute(string $attributeName, object $object[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if <literal>$object->attributeName</literal> does not exist.</para>
      <para><literal>assertObjectNotHasAttribute()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <example id="writing-tests-for-phpunit.assertions.assertObjectHasAttribute.example">
        <title>Usage of assertObjectHasAttribute()</title>
        <programlisting><![CDATA[<?php
class ObjectHasAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertObjectHasAttribute('foo', new stdClass);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ObjectHasAttributeTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) ObjectHasAttributeTest::testFailure
Failed asserting that object of class "stdClass" has attribute "foo".
/home/sb/ObjectHasAttributeTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertRegExp">
      <title><literal>assertRegExp()</literal></title>
      <indexterm><primary>assertRegExp()</primary></indexterm>
      <indexterm><primary>assertNotRegExp()</primary></indexterm>
      <para><literal>assertRegExp(string $pattern, string $string[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if <literal>$string</literal> does not match the regular expression <literal>$pattern</literal>.</para>
      <para><literal>assertNotRegExp()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <example id="writing-tests-for-phpunit.assertions.assertRegExp.example">
        <title>Usage of assertRegExp()</title>
        <programlisting><![CDATA[<?php
class RegExpTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertRegExp('/foo/', 'bar');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit RegExpTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) RegExpTest::testFailure
Failed asserting that <string:bar> matches PCRE pattern "/foo/".
/home/sb/RegExpTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertStringMatchesFormat">
      <title><literal>assertStringMatchesFormat()</literal></title>
      <indexterm><primary>assertStringMatchesFormat()</primary></indexterm>
      <indexterm><primary>assertStringNotMatchesFormat()</primary></indexterm>
      <para><literal>assertStringMatchesFormat(string $format, string $string[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if the <literal>$string</literal> does not match the <literal>$format</literal> string.</para>
      <para><literal>assertStringNotMatchesFormat()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <example id="writing-tests-for-phpunit.assertions.assertStringMatchesFormat.example">
        <title>Usage of assertStringMatchesFormat()</title>
        <programlisting><![CDATA[<?php
class StringMatchesFormatTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertStringMatchesFormat('%i', 'foo');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit StringMatchesFormatTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) StringMatchesFormatTest::testFailure
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-%i
+foo

/home/sb/StringMatchesFormatTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
      <para>The format string may contain the following placeholders:</para>
      <itemizedlist>
        <listitem><para><literal>%e</literal>: Represents a directory separator, for example <literal>/</literal> on Linux. </para></listitem>
        <listitem><para><literal>%s</literal>: One or more of anything (character or white space) except the end of line character.</para></listitem>
        <listitem><para><literal>%S</literal>: Zero or more of anything (character or white space) except the end of line character.</para></listitem>
        <listitem><para><literal>%a</literal>: One or more of anything (character or white space) including the end of line character.</para></listitem>
        <listitem><para><literal>%A</literal>: Zero or more of anything (character or white space) including the end of line character.</para></listitem>
        <listitem><para><literal>%w</literal>: Zero or more white space characters.</para></listitem>
        <listitem><para><literal>%i</literal>: A signed integer value, for example <literal>+3142</literal>, <literal>-3142</literal>.</para></listitem>
        <listitem><para><literal>%d</literal>: An unsigned integer value, for example <literal>123456</literal>.</para></listitem>
        <listitem><para><literal>%x</literal>: One or more hexadecimal character. That is, characters in the range <literal>0-9</literal>, <literal>a-f</literal>, <literal>A-F</literal>.</para></listitem>
        <listitem><para><literal>%f</literal>: A floating point number, for example: <literal>3.142</literal>, <literal>-3.142</literal>, <literal>3.142E-10</literal>, <literal>3.142e+10</literal>.</para></listitem>
        <listitem><para><literal>%c</literal>: A single character of any sort.</para></listitem>
      </itemizedlist>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertStringMatchesFormatFile">
      <title><literal>assertStringMatchesFormatFile()</literal></title>
      <indexterm><primary>assertStringMatchesFormatFile()</primary></indexterm>
      <indexterm><primary>assertStringNotMatchesFormatFile()</primary></indexterm>
      <para><literal>assertStringMatchesFormatFile(string $formatFile, string $string[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if the <literal>$string</literal> does not match the contents of the <literal>$formatFile</literal>.</para>
      <para><literal>assertStringNotMatchesFormatFile()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <example id="writing-tests-for-phpunit.assertions.assertStringMatchesFormatFile.example">
        <title>Usage of assertStringMatchesFormatFile()</title>
        <programlisting><![CDATA[<?php
class StringMatchesFormatFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertStringMatchesFormatFile('/path/to/expected.txt', 'foo');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit StringMatchesFormatFileTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) StringMatchesFormatFileTest::testFailure
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-%i
+foo

/home/sb/StringMatchesFormatFileTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertSame">
      <title><literal>assertSame()</literal></title>
      <indexterm><primary>assertSame()</primary></indexterm>
      <indexterm><primary>assertNotSame()</primary></indexterm>
      <indexterm><primary>assertAttributeSame()</primary></indexterm>
      <indexterm><primary>assertAttributeNotSame()</primary></indexterm>
      <para><literal>assertSame(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if the two variables <literal>$expected</literal> and <literal>$actual</literal> do not have the same type and value.</para>
      <para><literal>assertNotSame()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <para><literal>assertAttributeSame()</literal> and <literal>assertAttributeNotSame()</literal> are convenience wrappers that use a <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal> attribute of a class or object as the actual value.</para>
      <example id="writing-tests-for-phpunit.assertions.assertSame.example">
        <title>Usage of assertSame()</title>
        <programlisting><![CDATA[<?php
class SameTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertSame('2204', 2204);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit SameTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) SameTest::testFailure
<integer:2204> does not match expected type "string".
/home/sb/SameTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>

      <para><literal>assertSame(object $expected, object $actual[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if the two variables <literal>$expected</literal> and <literal>$actual</literal> do not reference the same object.</para>

      <example id="writing-tests-for-phpunit.assertions.assertSame.example2">
        <title>Usage of assertSame() with objects</title>
        <programlisting><![CDATA[<?php
class SameTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertSame(new stdClass, new stdClass);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit SameTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) SameTest::testFailure
Failed asserting that two variables reference the same object.
/home/sb/SameTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertSelectCount">
      <title><literal>assertSelectCount()</literal></title>
      <indexterm><primary>assertSelectCount()</primary></indexterm>
      <para><literal>assertSelectCount(array $selector, integer $count, mixed $actual[, string $message = '', boolean $isHtml = TRUE])</literal></para>
      <para>XXX</para>
      <example id="writing-tests-for-phpunit.assertions.assertSelectCount.example">
        <title>Usage of assertSelectCount()</title>
        <programlisting><![CDATA[<?php
?>]]></programlisting>
        <screen><userinput>phpunit SelectCountTest</userinput><![CDATA[
]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertSelectEquals">
      <title><literal>assertSelectEquals()</literal></title>
      <indexterm><primary>assertSelectEquals()</primary></indexterm>
      <para><literal>assertSelectEquals(array $selector, string $content, integer $count, mixed $actual[, string $message = '', boolean $isHtml = TRUE])</literal></para>
      <para>XXX</para>
      <example id="writing-tests-for-phpunit.assertions.assertSelectEquals.example">
        <title>Usage of assertSelectEquals()</title>
        <programlisting><![CDATA[<?php
?>]]></programlisting>
        <screen><userinput>phpunit SelectEqualsTest</userinput><![CDATA[
]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertSelectRegExp">
      <title><literal>assertSelectRegExp()</literal></title>
      <indexterm><primary>assertSelectRegExp()</primary></indexterm>
      <para><literal>assertSelectRegExp(array $selector, string $pattern, integer $count, mixed $actual[, string $message = '', boolean $isHtml = TRUE])</literal></para>
      <para>XXX</para>
      <example id="writing-tests-for-phpunit.assertions.assertSelectRegExp.example">
        <title>Usage of assertSelectRegExp()</title>
        <programlisting><![CDATA[<?php
?>]]></programlisting>
        <screen><userinput>phpunit SelectRegExpTest</userinput><![CDATA[
]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertStringEndsWith">
      <title><literal>assertStringEndsWith()</literal></title>
      <indexterm><primary>assertStringEndsWith()</primary></indexterm>
      <indexterm><primary>assertStringEndsNotWith()</primary></indexterm>
      <para><literal>assertStringEndsWith(string $suffix, string $string[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if the <literal>$string</literal> does not end with <literal>$suffix</literal>.</para>
      <para><literal>assertStringEndsNotWith()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <example id="writing-tests-for-phpunit.assertions.assertStringEndsWith.example">
        <title>Usage of assertStringEndsWith()</title>
        <programlisting><![CDATA[<?php
class StringEndsWithTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertStringEndsWith('suffix', 'foo');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit StringEndsWithTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) StringEndsWithTest::testFailure
Failed asserting that <string:foo> ends with "suffix".
/home/sb/StringEndsWithTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertStringEqualsFile">
      <title><literal>assertStringEqualsFile()</literal></title>
      <indexterm><primary>assertStringEqualsFile()</primary></indexterm>
      <indexterm><primary>assertStringNotEqualsFile()</primary></indexterm>
      <para><literal>assertStringEqualsFile(string $expectedFile, string $actualString[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal>  if the file specified by <literal>$expectedFile</literal> does not have <literal>$actualString</literal> as its contents.</para>
      <para><literal>assertStringNotEqualsFile()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <example id="writing-tests-for-phpunit.assertions.assertStringEqualsFile.example">
        <title>Usage of assertStringEqualsFile()</title>
        <programlisting><![CDATA[<?php
class StringEqualsFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertStringEqualsFile('/home/sb/expected', 'actual');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit StringEqualsFileTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) StringEqualsFileTest::testFailure
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ -1,2 +1 @@
-expected
-
+actual
\ No newline at end of file

/home/sb/StringEqualsFileTest.php:6

FAILURES!
Tests: 1, Assertions: 2, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertStringStartsWith">
      <title><literal>assertStringStartsWith()</literal></title>
      <indexterm><primary>assertStringStartsWith()</primary></indexterm>
      <indexterm><primary>assertStringStartsNotWith()</primary></indexterm>
      <para><literal>assertStringStartsWith(string $prefix, string $string[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if the <literal>$string</literal> does not start with <literal>$prefix</literal>.</para>
      <para><literal>assertStringStartsNotWith()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <example id="writing-tests-for-phpunit.assertions.assertStringStartsWith.example">
        <title>Usage of assertStringStartsWith()</title>
        <programlisting><![CDATA[<?php
class StringStartsWithTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertStringStartsWith('prefix', 'foo');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit StringStartsWithTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) StringStartsWithTest::testFailure
Failed asserting that <string:foo> starts with "prefix".
/home/sb/StringStartsWithTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertTag">
      <title><literal>assertTag()</literal></title>
      <indexterm><primary>assertTag()</primary></indexterm>
      <indexterm><primary>assertNotTag()</primary></indexterm>
      <para><literal>assertTag(array $matcher, string $actual[, string $message = '', boolean $isHtml = TRUE])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if <literal>$actual</literal> is not matched by the <literal>$matcher</literal>.</para>
      <para><literal>$matcher</literal> is an associative array that specifies the match criteria for the assertion:</para>
      <itemizedlist>
        <listitem><literal>id</literal>: The node with the given <literal>id</literal> attribute must match the corresponsing value.</listitem>
        <listitem><literal>tags</literal>: The node type must match the corresponding value.</listitem>
        <listitem><literal>attributes</literal>: The node's attributes must match the corresponsing values in the <literal>$attributes</literal> associative array.</listitem>
        <listitem><literal>content</literal>: The text content must match the given value.</listitem>
        <listitem><literal>parent</literal>: The node's parent must match the <literal>$parent</literal> associative array.</listitem>
        <listitem><literal>child</literal>: At least one of the node's immediate children must meet the criteria described by the <literal>$child</literal> associative array.</listitem>
        <listitem><literal>ancestor</literal>: At least one of the node's ancestors must meet the criteria described by the <literal>$ancestor</literal> associative array.</listitem>
        <listitem><literal>descendant</literal>: At least one of the node's descendants must meet the criteria described by the <literal>$descendant</literal> associative array.</listitem>
        <listitem><literal>children</literal>: Associative array for counting children of a node.
          <itemizedlist>
            <listitem><literal>count</literal>: The number of matching children must be equal to this number.</listitem>
            <listitem><literal>less_than</literal>: The number of matching children must be less than this number.</listitem>
            <listitem><literal>greater_than</literal>: The number of matching children must be greater than this number.</listitem>
            <listitem><literal>only</literal>: Another associative array consisting of the keys to use to match on the children, and only matching children will be counted.</listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
      <para><literal>assertNotTag()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <example id="writing-tests-for-phpunit.assertions.assertTag.example">
        <title>Usage of assertTag()</title>
        <programlisting><![CDATA[<?php
// Matcher that asserts that there is an element with an id="my_id".
$matcher = array('id' => 'my_id');

// Matcher that asserts that there is a "span" tag.
$matcher = array('tag' => 'span');

// Matcher that asserts that there is a "span" tag with the content
// "Hello World".
$matcher = array('tag' => 'span', 'content' => 'Hello World');

// Matcher that asserts that there is a "span" tag with content matching the
// regular expression pattern.
$matcher = array('tag' => 'span', 'content' => '/Try P(HP|ython)/');

// Matcher that asserts that there is a "span" with an "list" class attribute.
$matcher = array(
  'tag'        => 'span',
  'attributes' => array('class' => 'list')
);

// Matcher that asserts that there is a "span" inside of a "div".
$matcher = array(
  'tag'    => 'span',
  'parent' => array('tag' => 'div')
);

// Matcher that asserts that there is a "span" somewhere inside a "table".
$matcher = array(
  'tag'      => 'span',
  'ancestor' => array('tag' => 'table')
);

// Matcher that asserts that there is a "span" with at least one "em" child.
$matcher = array(
  'tag'   => 'span',
  'child' => array('tag' => 'em')
);

// Matcher that asserts that there is a "span" containing a (possibly nested)
// "strong" tag.
$matcher = array(
  'tag'        => 'span',
  'descendant' => array('tag' => 'strong')
);

// Matcher that asserts that there is a "span" containing 5-10 "em" tags as
// immediate children.
$matcher = array(
  'tag'      => 'span',
  'children' => array(
    'less_than'    => 11,
    'greater_than' => 4,
    'only'         => array('tag' => 'em')
  )
);

// Matcher that asserts that there is a "div", with an "ul" ancestor and a "li"
// parent (with class="enum"), and containing a "span" descendant that contains
// an element with id="my_test" and the text "Hello World".
$matcher = array(
  'tag'        => 'div',
  'ancestor'   => array('tag' => 'ul'),
  'parent'     => array(
    'tag'        => 'li',
    'attributes' => array('class' => 'enum')
  ),
  'descendant' => array(
    'tag'   => 'span',
    'child' => array(
      'id'      => 'my_test',
      'content' => 'Hello World'
    )
  )
);

// Use assertTag() to apply a $matcher to a piece of $html.
$this->assertTag($matcher, $html);

// Use assertTag() to apply a $matcher to a piece of $xml.
$this->assertTag($matcher, $xml, '', FALSE);
?>]]></programlisting>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertThat">
      <title><literal>assertThat()</literal></title>
      <indexterm><primary>assertThat()</primary></indexterm>

      <para>
        More complex assertions can be formulated using the
        <literal>PHPUnit_Framework_Constraint</literal> classes. They can be
        evaluated using the <literal>assertThat()</literal> method.
        <xref linkend="writing-tests-for-phpunit.assertions.assertThat.example"/> shows how the
        <literal>logicalNot()</literal> and <literal>equalTo()</literal>
        constraints can be used to express the same assertion as
        <literal>assertNotEquals()</literal>.
      </para>

      <para><literal>assertThat(mixed $value, PHPUnit_Framework_Constraint $constraint[, $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if the <literal>$value</literal> does not match the <literal>$constraint</literal>.</para>
      <example id="writing-tests-for-phpunit.assertions.assertThat.example">
        <title>Usage of assertThat()</title>
        <programlisting><![CDATA[<?php
class BiscuitTest extends PHPUnit_Framework_TestCase
{
    public function testEquals()
    {
        $theBiscuit = new Biscuit('Ginger');
        $myBiscuit  = new Biscuit('Ginger');

        $this->assertThat(
          $theBiscuit,
          $this->logicalNot(
            $this->equalTo($myBiscuit)
          )
        );
    }
}
?>]]></programlisting>
      </example>

      <para>
        <xref linkend="writing-tests-for-phpunit.assertions.assertThat.tables.constraints" /> shows the
        available <literal>PHPUnit_Framework_Constraint</literal> classes.
      </para>

      <table id="writing-tests-for-phpunit.assertions.assertThat.tables.constraints">
        <title>Constraints</title>

        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>Constraint</entry>
              <entry>Meaning</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <indexterm><primary>attribute()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_Attribute attribute(PHPUnit_Framework_Constraint $constraint, $attributeName)</literal></entry>
              <entry>Constraint that applies another constraint to an attribute of a class or an object.</entry>
            </row>
            <row>
              <indexterm><primary>anything()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsAnything anything()</literal></entry>
              <entry>Constraint that accepts any input value.</entry>
            </row>
            <row>
              <indexterm><primary>arrayHasKey()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_ArrayHasKey arrayHasKey(mixed $key)</literal></entry>
              <entry>Constraint that asserts that the array it is evaluated for has a given key.</entry>
            </row>
            <row>
              <indexterm><primary>contains()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_TraversableContains contains(mixed $value)</literal></entry>
              <entry>Constraint that asserts that the <literal>array</literal> or object that implements the <literal>Iterator</literal> interface it is evaluated for contains a given value.</entry>
            </row>
            <row>
              <indexterm><primary>equalTo()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsEqual equalTo($value, $delta = 0, $maxDepth = 10)</literal></entry>
              <entry>Constraint that checks if one value is equal to another.</entry>
            </row>
            <row>
              <indexterm><primary>attributeEqualTo()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_Attribute attributeEqualTo($attributeName, $value, $delta = 0, $maxDepth = 10)</literal></entry>
              <entry>Constraint that checks if a value is equal to an attribute of a class or of an object.</entry>
            </row>
            <row>
              <indexterm><primary>fileExists()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_FileExists fileExists()</literal></entry>
              <entry>Constraint that checks if the file(name) that it is evaluated for exists.</entry>
            </row>
            <row>
              <indexterm><primary>greaterThan()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_GreaterThan greaterThan(mixed $value)</literal></entry>
              <entry>Constraint that asserts that the value it is evaluated for is greater than a given value.</entry>
            </row>
            <row>
              <indexterm><primary>greaterThanOrEqual()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_Or greaterThanOrEqual(mixed $value)</literal></entry>
              <entry>Constraint that asserts that the value it is evaluated for is greater than or equal to a given value.</entry>
            </row>
            <row>
              <indexterm><primary>classHasAttribute()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_ClassHasAttribute classHasAttribute(string $attributeName)</literal></entry>
              <entry>Constraint that asserts that the class it is evaluated for has a given attribute.</entry>
            </row>
            <row>
              <indexterm><primary>classHasStaticAttribute()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_ClassHasStaticAttribute classHasStaticAttribute(string $attributeName)</literal></entry>
              <entry>Constraint that asserts that the class it is evaluated for has a given static attribute.</entry>
            </row>
            <row>
              <indexterm><primary>hasAttribute()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_ObjectHasAttribute hasAttribute(string $attributeName)</literal></entry>
              <entry>Constraint that asserts that the object it is evaluated for has a given attribute.</entry>
            </row>
            <row>
              <indexterm><primary>identicalTo()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsIdentical identicalTo(mixed $value)</literal></entry>
              <entry>Constraint that asserts that one value is identical to another.</entry>
            </row>
            <row>
              <indexterm><primary>isFalse()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsFalse isFalse()</literal></entry>
              <entry>Constraint that asserts that the value it is evaluated is <literal>FALSE</literal>.</entry>
            </row>
            <row>
              <indexterm><primary>isInstanceOf()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsInstanceOf isInstanceOf(string $className)</literal></entry>
              <entry>Constraint that asserts that the object it is evaluated for is an instance of a given class.</entry>
            </row>
            <row>
              <indexterm><primary>isNull()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsNull isNull()</literal></entry>
              <entry>Constraint that asserts that the value it is evaluated is <literal>NULL</literal>.</entry>
            </row>
            <row>
              <indexterm><primary>isTrue()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsTrue isTrue()</literal></entry>
              <entry>Constraint that asserts that the value it is evaluated is <literal>TRUE</literal>.</entry>
            </row>
            <row>
              <indexterm><primary>isType()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsType isType(string $type)</literal></entry>
              <entry>Constraint that asserts that the value it is evaluated for is of a specified type.</entry>
            </row>
            <row>
              <indexterm><primary>lessThan()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_LessThan lessThan(mixed $value)</literal></entry>
              <entry>Constraint that asserts that the value it is evaluated for is smaller than a given value.</entry>
            </row>
            <row>
              <indexterm><primary>lessThanOrEqual()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_Or lessThanOrEqual(mixed $value)</literal></entry>
              <entry>Constraint that asserts that the value it is evaluated for is smaller than or equal to a given value.</entry>
            </row>
            <row>
              <indexterm><primary>logicalAnd()</primary></indexterm>
              <entry><literal>logicalAnd()</literal></entry>
              <entry>Logical AND.</entry>
            </row>
            <row>
              <indexterm><primary>logicalNot()</primary></indexterm>
              <entry><literal>logicalNot(PHPUnit_Framework_Constraint $constraint)</literal></entry>
              <entry>Logical NOT.</entry>
            </row>
            <row>
              <indexterm><primary>logicalOr()</primary></indexterm>
              <entry><literal>logicalOr()</literal></entry>
              <entry>Logical OR.</entry>
            </row>
            <row>
              <indexterm><primary>logicalXor()</primary></indexterm>
              <entry><literal>logicalXor()</literal></entry>
              <entry>Logical XOR.</entry>
            </row>
            <row>
              <indexterm><primary>matchesRegularExpression()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_PCREMatch matchesRegularExpression(string $pattern)</literal></entry>
              <entry>Constraint that asserts that the string it is evaluated for matches a regular expression.</entry>
            </row>
            <row>
              <indexterm><primary>stringContains()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_StringContains stringContains(string $string, bool $case)</literal></entry>
              <entry>Constraint that asserts that the string it is evaluated for contains a given string.</entry>
            </row>
            <row>
              <indexterm><primary>stringEndsWith()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_StringEndsWith stringEndsWith(string $suffix)</literal></entry>
              <entry>Constraint that asserts that the string it is evaluated for ends with a given suffix.</entry>
            </row>
            <row>
              <indexterm><primary>stringStartsWith()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_StringStartsWith stringStartsWith(string $prefix)</literal></entry>
              <entry>Constraint that asserts that the string it is evaluated for starts with a given prefix.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertTrue">
      <title><literal>assertTrue()</literal></title>
      <indexterm><primary>assertTrue()</primary></indexterm>
      <para><literal>assertTrue(bool $condition[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if <literal>$condition</literal> is <literal>FALSE</literal>.</para>
      <example id="writing-tests-for-phpunit.assertions.assertTrue.example">
        <title>Usage of assertTrue()</title>
        <programlisting><![CDATA[<?php
class TrueTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertTrue(FALSE);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit TrueTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) TrueTest::testFailure
Failed asserting that <boolean:false> is true.
/home/sb/TrueTest.php:11

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertXmlFileEqualsXmlFile">
      <title><literal>assertXmlFileEqualsXmlFile()</literal></title>
      <indexterm><primary>assertXmlFileEqualsXmlFile()</primary></indexterm>
      <indexterm><primary>assertXmlFileNotEqualsXmlFile()</primary></indexterm>
      <para><literal>assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if the XML document in <literal>$actualFile</literal> is not equal to the XML document in <literal>$expectedFile</literal>.</para>
      <para><literal>assertXmlFileNotEqualsXmlFile()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <example id="writing-tests-for-phpunit.assertions.assertXmlFileEqualsXmlFile.example">
        <title>Usage of assertXmlFileEqualsXmlFile()</title>
        <programlisting><![CDATA[<?php
class XmlFileEqualsXmlFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertXmlFileEqualsXmlFile(
          '/home/sb/expected.xml', '/home/sb/actual.xml');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit XmlFileEqualsXmlFileTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) XmlFileEqualsXmlFileTest::testFailure
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ -1,4 +1,4 @@
 <?xml version="1.0"?>
 <foo>
-  <bar/>
+  <baz/>
 </foo>

/home/sb/XmlFileEqualsXmlFileTest.php:7

FAILURES!
Tests: 1, Assertions: 3, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertXmlStringEqualsXmlFile">
      <title><literal>assertXmlStringEqualsXmlFile()</literal></title>
      <indexterm><primary>assertXmlStringEqualsXmlFile()</primary></indexterm>
      <indexterm><primary>assertXmlStringNotEqualsXmlFile()</primary></indexterm>
      <para><literal>assertXmlStringEqualsXmlFile(string $expectedFile, string $actualXml[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if the XML document in <literal>$actualXml</literal> is not equal to the XML document in <literal>$expectedFile</literal>.</para>
      <para><literal>assertXmlStringNotEqualsXmlFile()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <example id="writing-tests-for-phpunit.assertions.assertXmlStringEqualsXmlFile.example">
        <title>Usage of assertXmlStringEqualsXmlFile()</title>
        <programlisting><![CDATA[<?php
class XmlStringEqualsXmlFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertXmlStringEqualsXmlFile(
          '/home/sb/expected.xml', '<foo><baz/></foo>');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit XmlStringEqualsXmlFileTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) XmlStringEqualsXmlFileTest::testFailure
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ -1,4 +1,4 @@
 <?xml version="1.0"?>
 <foo>
-  <bar/>
+  <baz/>
 </foo>

/home/sb/XmlStringEqualsXmlFileTest.php:7

FAILURES!
Tests: 1, Assertions: 2, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertXmlStringEqualsXmlString">
      <title><literal>assertXmlStringEqualsXmlString()</literal></title>
      <indexterm><primary>assertXmlStringEqualsXmlString()</primary></indexterm>
      <indexterm><primary>assertXmlStringNotEqualsXmlString()</primary></indexterm>
      <para><literal>assertXmlStringEqualsXmlString(string $expectedXml, string $actualXml[, string $message = ''])</literal></para>
      <para>Reports an error identified by <literal>$message</literal> if the XML document in <literal>$actualXml</literal> is not equal to the XML document in <literal>$expectedXml</literal>.</para>
      <para><literal>assertXmlStringNotEqualsXmlString()</literal> is the inverse of this assertion and takes the same arguments.</para>
      <example id="writing-tests-for-phpunit.assertions.assertXmlStringEqualsXmlString.example">
        <title>Usage of assertXmlStringEqualsXmlString()</title>
        <programlisting><![CDATA[<?php
class XmlStringEqualsXmlStringTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertXmlStringEqualsXmlString(
          '<foo><bar/></foo>', '<foo><baz/></foo>');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit XmlStringEqualsXmlStringTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) XmlStringEqualsXmlStringTest::testFailure
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ -1,4 +1,4 @@
 <?xml version="1.0"?>
 <foo>
-  <bar/>
+  <baz/>
 </foo>

/home/sb/XmlStringEqualsXmlStringTest.php:7

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>
  </section>
</chapter>
